--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
@@ -1,8 +1,10 @@
 package net.minecraft.tileentity;
 
+import com.google.common.collect.Maps;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFurnace;
 import net.minecraft.block.material.Material;
+import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Blocks;
@@ -32,6 +34,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Objects;
+
 public class TileEntityFurnace extends TileEntityLockable implements ITickable, ISidedInventory
 {
     private static final int[] field_145962_k = new int[] {0};
@@ -43,6 +50,7 @@
     private int field_174906_k;
     private int field_174905_l;
     private String field_145958_o;
+    private static final Map<String,Integer> recipesUsed = Maps.newHashMap();//cherry add
 
     public int func_70302_i_()
     {
@@ -121,11 +129,18 @@
         super.func_145839_a(p_145839_1_);
         this.field_145957_n = NonNullList.<ItemStack>func_191197_a(this.func_70302_i_(), ItemStack.field_190927_a);
         ItemStackHelper.func_191283_b(p_145839_1_, this.field_145957_n);
-        this.field_145956_a = p_145839_1_.func_74765_d("BurnTime");
-        this.field_174906_k = p_145839_1_.func_74765_d("CookTime");
-        this.field_174905_l = p_145839_1_.func_74765_d("CookTimeTotal");
+        this.field_145956_a = p_145839_1_.func_74762_e("BurnTime");
+        this.field_174906_k = p_145839_1_.func_74762_e("CookTime");
+        this.field_174905_l = p_145839_1_.func_74762_e("CookTimeTotal");
         this.field_145963_i = func_145952_a(this.field_145957_n.get(1));
 
+        //cherry add begin
+        int i = p_145839_1_.func_74762_e("RecipesUsedSize");
+        for (int j = 0; j < i; j++) {
+            recipesUsed.put(p_145839_1_.func_74779_i("RecipeLocation" + i), p_145839_1_.func_74762_e("RecipeAmount" + i));
+        }
+        //cherry add end 
+
         if (p_145839_1_.func_150297_b("CustomName", 8))
         {
             this.field_145958_o = p_145839_1_.func_74779_i("CustomName");
@@ -135,15 +150,28 @@
     public NBTTagCompound func_189515_b(NBTTagCompound p_189515_1_)
     {
         super.func_189515_b(p_189515_1_);
-        p_189515_1_.func_74777_a("BurnTime", (short)this.field_145956_a);
-        p_189515_1_.func_74777_a("CookTime", (short)this.field_174906_k);
-        p_189515_1_.func_74777_a("CookTimeTotal", (short)this.field_174905_l);
+        p_189515_1_.func_74768_a("BurnTime", (short)this.field_145956_a);
+        p_189515_1_.func_74768_a("CookTime", (short)this.field_174906_k);
+        p_189515_1_.func_74768_a("CookTimeTotal", (short)this.field_174905_l);
         ItemStackHelper.func_191282_a(p_189515_1_, this.field_145957_n);
-
+        
+        //cherry add begin
+        p_189515_1_.func_74768_a("RecipesUsedSize", recipesUsed.size());
+        int i = 0;
+        for (Iterator iterator = recipesUsed.entrySet().iterator();iterator.hasNext(); ++i) {
+            Map.Entry<String, Integer> entry = (Map.Entry<String, Integer>) iterator.next();
+            p_189515_1_.func_74778_a("RecipeLocation"+i,(entry.getKey()));
+            p_189515_1_.func_74768_a("RecipeAmount"+i,(entry.getValue()));
+            
+        }
+        //cherry add end
+        
+        
         if (this.func_145818_k_())
         {
             p_189515_1_.func_74778_a("CustomName", this.field_145958_o);
         }
+        
 
         return p_189515_1_;
     }
@@ -196,8 +224,8 @@
 
                             if (itemstack.func_190926_b())
                             {
-                                Item item1 = item.func_77668_q();
-                                this.field_145957_n.set(1, item1 == null ? ItemStack.field_190927_a : new ItemStack(item1));
+                                ItemStack item1 = item.getContainerItem(itemstack);
+                                this.field_145957_n.set(1, item1);
                             }
                         }
                     }
@@ -269,13 +297,13 @@
                 {
                     return false;
                 }
-                else if (itemstack1.func_190916_E() < this.func_70297_j_() && itemstack1.func_190916_E() < itemstack1.func_77976_d())
+                else if (itemstack1.func_190916_E() + itemstack.func_190916_E() <= this.func_70297_j_() && itemstack1.func_190916_E() + itemstack.func_190916_E() <= itemstack1.func_77976_d())  // Forge fix: make furnace respect stack sizes in furnace recipes
                 {
                     return true;
                 }
                 else
                 {
-                    return itemstack1.func_190916_E() < itemstack.func_77976_d();
+                    return itemstack1.func_190916_E() + itemstack.func_190916_E() <= itemstack.func_77976_d(); // Forge fix: make furnace respect stack sizes in furnace recipes
                 }
             }
         }
@@ -295,8 +323,14 @@
             }
             else if (itemstack2.func_77973_b() == itemstack1.func_77973_b())
             {
-                itemstack2.func_190917_f(1);
+                itemstack2.func_190917_f(itemstack1.func_190916_E());
             }
+            //cherry begin
+            if (field_145850_b.field_72995_K) {
+                recipesUsed.compute(Objects.requireNonNull(itemstack1.func_77973_b().getRegistryName()).toString(), 
+                        (s, i) -> 1 + (i == null ? 0 : i));
+            }
+            //cherry end
 
             if (itemstack.func_77973_b() == Item.func_150898_a(Blocks.field_150360_v) && itemstack.func_77960_j() == 1 && !((ItemStack)this.field_145957_n.get(1)).func_190926_b() && ((ItemStack)this.field_145957_n.get(1)).func_77973_b() == Items.field_151133_ar)
             {
@@ -306,7 +340,44 @@
             itemstack.func_190918_g(1);
         }
     }
+    //cherry add function
+    public static void getExp(EntityPlayer player ){
+        Iterator iterator = recipesUsed.entrySet().iterator();
+        while (iterator.hasNext()){
+            Map.Entry<String,Integer> entry = (Map.Entry<String, Integer>) iterator.next();
+            Item item = Item.func_111206_d(entry.getKey());
+            if(item !=null){
+                getExp(player,entry.getValue(),FurnaceRecipes.func_77602_a().func_151398_b(new ItemStack(item)));
+            }
 
+        }
+
+        recipesUsed.clear();
+
+    }
+
+    //cherry add function
+    public static void getExp(EntityPlayer player, int totalExp, float exp) {
+        int i;
+        if (exp == 0.0F) {
+            totalExp = 0;
+        } else if (exp < 1.0F) {
+            i = MathHelper.func_76141_d((float)totalExp * exp);
+            if (i < MathHelper.func_76123_f((float)totalExp * exp) && Math.random() < (double)((float)totalExp * exp - (float)i)) {
+                ++i;
+            }
+
+            totalExp = i;
+        }
+
+        while(totalExp > 0) {
+            System.out.println(totalExp);//test
+            i = EntityXPOrb.func_70527_a(totalExp);
+            totalExp -= i;
+            player.field_70170_p.func_72838_d(new EntityXPOrb(player.field_70170_p, player.field_70165_t, player.field_70163_u + 0.5D, player.field_70161_v + 0.5D, i));
+        }
+    }
+    
     public static int func_145952_a(ItemStack p_145952_0_)
     {
         if (p_145952_0_.func_190926_b())
@@ -315,6 +386,8 @@
         }
         else
         {
+            int burnTime = net.minecraftforge.event.ForgeEventFactory.getItemBurnTime(p_145952_0_);
+            if (burnTime >= 0) return burnTime;
             Item item = p_145952_0_.func_77973_b();
 
             if (item == Item.func_150898_a(Blocks.field_150376_bx))
@@ -530,4 +603,23 @@
     {
         this.field_145957_n.clear();
     }
+
+    net.minecraftforge.items.IItemHandler handlerTop = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.UP);
+    net.minecraftforge.items.IItemHandler handlerBottom = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.DOWN);
+    net.minecraftforge.items.IItemHandler handlerSide = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.WEST);
+
+    @SuppressWarnings("unchecked")
+    @Override
+    @javax.annotation.Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable net.minecraft.util.EnumFacing facing)
+    {
+        if (facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
+            if (facing == EnumFacing.DOWN)
+                return (T) handlerBottom;
+            else if (facing == EnumFacing.UP)
+                return (T) handlerTop;
+            else
+                return (T) handlerSide;
+        return super.getCapability(capability, facing);
+    }
 }
