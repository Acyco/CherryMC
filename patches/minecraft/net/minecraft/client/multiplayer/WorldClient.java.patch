--- ../src-base/minecraft/net/minecraft/client/multiplayer/WorldClient.java
+++ ../src-work/minecraft/net/minecraft/client/multiplayer/WorldClient.java
@@ -45,6 +45,9 @@
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import optifine.Config;
+import optifine.DynamicLights;
+import optifine.PlayerControllerOF;
 
 @SideOnly(Side.CLIENT)
 public class WorldClient extends World
@@ -57,20 +60,27 @@
     private final Set<ChunkPos> field_73038_N = Sets.<ChunkPos>newHashSet();
     private int field_184158_M;
     protected Set<ChunkPos> field_184157_a;
+    //op add
+    private int playerChunkX = Integer.MIN_VALUE;
+    private int playerChunkY = Integer.MIN_VALUE;
+    private boolean playerUpdate = false;
 
+
     public WorldClient(NetHandlerPlayClient p_i45063_1_, WorldSettings p_i45063_2_, int p_i45063_3_, EnumDifficulty p_i45063_4_, Profiler p_i45063_5_)
     {
-        super(new SaveHandlerMP(), new WorldInfo(p_i45063_2_, "MpServer"), DimensionType.func_186069_a(p_i45063_3_).func_186070_d(), p_i45063_5_, true);
+        super(new SaveHandlerMP(), new WorldInfo(p_i45063_2_, "MpServer"), net.minecraftforge.common.DimensionManager.createProviderFor(p_i45063_3_), p_i45063_5_, true);
         this.field_184158_M = this.field_73012_v.nextInt(12000);
         this.field_184157_a = Sets.<ChunkPos>newHashSet();
         this.field_73035_a = p_i45063_1_;
         this.func_72912_H().func_176144_a(p_i45063_4_);
-        this.func_175652_B(new BlockPos(8, 64, 8));
         this.field_73011_w.func_76558_a(this);
+        this.func_175652_B(new BlockPos(8, 64, 8)); //Forge: Moved below registerWorld to prevent NPE in our redirect.
         this.field_73020_y = this.func_72970_h();
         this.field_72988_C = new SaveDataMemoryStorage();
         this.func_72966_v();
         this.func_72947_a();
+        this.initCapabilities();
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(this));
     }
 
     public void func_72835_b()
@@ -120,21 +130,45 @@
 
     protected void func_184154_a()
     {
-        this.field_184157_a.clear();
-        int i = this.field_73037_M.field_71474_y.field_151451_c;
-        this.field_72984_F.func_76320_a("buildList");
-        int j = MathHelper.func_76128_c(this.field_73037_M.field_71439_g.field_70165_t / 16.0D);
-        int k = MathHelper.func_76128_c(this.field_73037_M.field_71439_g.field_70161_v / 16.0D);
+       /* this.visibleChunks.clear();
+        int i = this.mc.gameSettings.renderDistanceChunks;
+        this.profiler.startSection("buildList");
+        int j = MathHelper.floor(this.mc.player.posX / 16.0D);
+        int k = MathHelper.floor(this.mc.player.posZ / 16.0D);
 
         for (int l = -i; l <= i; ++l)
         {
             for (int i1 = -i; i1 <= i; ++i1)
             {
-                this.field_184157_a.add(new ChunkPos(l + j, i1 + k));
+                this.visibleChunks.add(new ChunkPos(l + j, i1 + k));
             }
         }
 
-        this.field_72984_F.func_76319_b();
+        this.profiler.endSection();*/
+
+        int i = MathHelper.func_76128_c(this.field_73037_M.field_71439_g.field_70165_t / 16.0D);
+        int j = MathHelper.func_76128_c(this.field_73037_M.field_71439_g.field_70161_v / 16.0D);
+
+        if (i != this.playerChunkX || j != this.playerChunkY)
+        {
+            this.playerChunkX = i;
+            this.playerChunkY = j;
+            this.field_184157_a.clear();
+            int k = this.field_73037_M.field_71474_y.field_151451_c;
+            this.field_72984_F.func_76320_a("buildList");
+            int l = MathHelper.func_76128_c(this.field_73037_M.field_71439_g.field_70165_t / 16.0D);
+            int i1 = MathHelper.func_76128_c(this.field_73037_M.field_71439_g.field_70161_v / 16.0D);
+
+            for (int j1 = -k; j1 <= k; ++j1)
+            {
+                for (int k1 = -k; k1 <= k; ++k1)
+                {
+                    this.field_184157_a.add(new ChunkPos(j1 + l, k1 + i1));
+                }
+            }
+
+            this.field_72984_F.func_76319_b();
+        }
     }
 
     protected void func_147456_g()
@@ -510,4 +544,48 @@
     {
         return (ChunkProviderClient)super.func_72863_F();
     }
+    //op add
+    public int func_175626_b(BlockPos pos, int lightValue)
+    {
+        int i = super.func_175626_b(pos, lightValue);
+
+        if (Config.isDynamicLights())
+        {
+            i = DynamicLights.getCombinedLight(pos, i);
+        }
+
+        return i;
+    }
+
+    /**
+     * Sets the block state at a given location. Flag 1 will cause a block update. Flag 2 will send the change to
+     * clients (you almost always want this). Flag 4 prevents the block from being re-rendered, if this is a client
+     * world. Flags can be added together.
+     */
+    public boolean func_180501_a(BlockPos pos, IBlockState newState, int flags)
+    {
+        this.playerUpdate = this.isPlayerActing();
+        boolean flag = super.func_180501_a(pos, newState, flags);
+        this.playerUpdate = false;
+        return flag;
+    }
+
+    private boolean isPlayerActing()
+    {
+        if (this.field_73037_M.field_71442_b instanceof PlayerControllerOF)
+        {
+            PlayerControllerOF playercontrollerof = (PlayerControllerOF)this.field_73037_M.field_71442_b;
+            return playercontrollerof.isActing();
+        }
+        else
+        {
+            return false;
+        }
+    }
+
+    public boolean isPlayerUpdate()
+    {
+        return this.playerUpdate;
+    }
+
 }
