--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.client.resources.IResource;
@@ -15,6 +16,9 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import optifine.Config;
+import optifine.TextureUtils;
+import shadersmod.client.Shaders;
 
 @SideOnly(Side.CLIENT)
 public class TextureAtlasSprite
@@ -35,10 +39,39 @@
     protected int field_110973_g;
     protected int field_110983_h;
 
+    //op 
+    private int indexInMap = -1;
+    public float baseU;
+    public float baseV;
+    public int sheetWidth;
+    public int sheetHeight;
+    public int glSpriteTextureId = -1;
+    public TextureAtlasSprite spriteSingle = null;
+    public boolean isSpriteSingle = false;
+    public int mipmapLevels = 0;
+    public TextureAtlasSprite spriteNormal = null;
+    public TextureAtlasSprite spriteSpecular = null;
+    public boolean isShadersSprite = false;
+    public boolean isDependencyParent = false;
+
+    private TextureAtlasSprite(TextureAtlasSprite p_i2_1_)
+    {
+        this.field_110984_i = p_i2_1_.field_110984_i;
+        this.isSpriteSingle = true;
+    }
+
+
     protected TextureAtlasSprite(String p_i1282_1_)
     {
         this.field_110984_i = p_i1282_1_;
+
+        if (Config.isMultiTexture())
+        {
+            this.spriteSingle = new TextureAtlasSprite(this);
+        }
+        
     }
+    
 
     protected static TextureAtlasSprite func_176604_a(ResourceLocation p_176604_0_)
     {
@@ -50,12 +83,15 @@
         this.field_110975_c = p_110971_3_;
         this.field_110974_d = p_110971_4_;
         this.field_130222_e = p_110971_5_;
-        float f = (float)(0.009999999776482582D / (double)p_110971_1_);
-        float f1 = (float)(0.009999999776482582D / (double)p_110971_2_);
-        this.field_110979_l = (float)p_110971_3_ / (float)((double)p_110971_1_) + f;
-        this.field_110980_m = (float)(p_110971_3_ + this.field_130223_c) / (float)((double)p_110971_1_) - f;
-        this.field_110977_n = (float)p_110971_4_ / (float)p_110971_2_ + f1;
-        this.field_110978_o = (float)(p_110971_4_ + this.field_130224_d) / (float)p_110971_2_ - f1;
+        this.field_110979_l = (float)p_110971_3_ / (float)p_110971_1_;
+        this.field_110980_m = (float)(p_110971_3_ + this.field_130223_c) / (float)p_110971_1_;
+        this.field_110977_n = (float)p_110971_4_ / (float)p_110971_2_;
+        this.field_110978_o = (float)(p_110971_4_ + this.field_130224_d) / (float)p_110971_2_;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110971_a(this.field_130223_c, this.field_130224_d, 0, 0, false);
+        }
     }
 
     public void func_94217_a(TextureAtlasSprite p_94217_1_)
@@ -69,6 +105,11 @@
         this.field_110980_m = p_94217_1_.field_110980_m;
         this.field_110977_n = p_94217_1_.field_110977_n;
         this.field_110978_o = p_94217_1_.field_110978_o;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110971_a(this.field_130223_c, this.field_130224_d, 0, 0, false);
+        }
     }
 
     public int func_130010_a()
@@ -244,6 +285,12 @@
         {
             throw new RuntimeException("broken aspect ratio and not an animation");
         }
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.field_130223_c = this.field_130223_c;
+            this.spriteSingle.field_130224_d = this.field_130224_d;
+        }
     }
 
     public void func_188539_a(IResource p_188539_1_, int p_188539_2_) throws IOException
@@ -294,6 +341,35 @@
                 this.field_110982_k = new AnimationMetadataSection(list, this.field_130223_c, this.field_130224_d, animationmetadatasection.func_110469_d(), animationmetadatasection.func_177219_e());
             }
         }
+        
+        //op
+        if (!this.isShadersSprite)
+        {
+            if (Config.isShaders())
+            {
+                this.loadShadersSprites();
+            }
+
+            for (int k = 0; k < this.field_110976_a.size(); ++k)
+            {
+                int[][] aint2 = this.field_110976_a.get(k);
+
+                if (aint2 != null && !this.field_110984_i.startsWith("minecraft:blocks/leaves_"))
+                {
+                    for (int i1 = 0; i1 < aint2.length; ++i1)
+                    {
+                        int[] aint1 = aint2[i1];
+                        this.fixTransparentColor(aint1);
+                    }
+                }
+            }
+
+            if (this.spriteSingle != null)
+            {
+                IResource iresource = Config.getResourceManager().func_110536_a(p_188539_1_.func_177241_a());
+                this.spriteSingle.func_188539_a(iresource, p_188539_2_);
+            }
+        }
     }
 
     public void func_147963_d(int p_147963_1_)
@@ -340,6 +416,12 @@
         }
 
         this.func_110968_a(list);
+        
+        //op
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_147963_d(p_147963_1_);
+        }
     }
 
     private void func_130099_d(int p_130099_1_)
@@ -351,6 +433,12 @@
                 this.field_110976_a.add(null);
             }
         }
+        
+        //op
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_130099_d(p_130099_1_);
+        }
     }
 
     private static int[][] func_147962_a(int[][] p_147962_0_, int p_147962_1_, int p_147962_2_, int p_147962_3_)
@@ -374,6 +462,13 @@
     public void func_130103_l()
     {
         this.field_110976_a.clear();
+        
+        //op
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_130103_l();
+        }
     }
 
     public boolean func_130098_m()
@@ -384,6 +479,12 @@
     public void func_110968_a(List<int[][]> p_110968_1_)
     {
         this.field_110976_a = p_110968_1_;
+        
+        //op
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110968_a(p_110968_1_);
+        }
     }
 
     private void func_130102_n()
@@ -392,10 +493,214 @@
         this.func_110968_a(Lists.newArrayList());
         this.field_110973_g = 0;
         this.field_110983_h = 0;
+        //op
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_130102_n();
+        }
     }
 
     public String toString()
     {
         return "TextureAtlasSprite{name='" + this.field_110984_i + '\'' + ", frameCount=" + this.field_110976_a.size() + ", rotated=" + this.field_130222_e + ", x=" + this.field_110975_c + ", y=" + this.field_110974_d + ", height=" + this.field_130224_d + ", width=" + this.field_130223_c + ", u0=" + this.field_110979_l + ", u1=" + this.field_110980_m + ", v0=" + this.field_110977_n + ", v1=" + this.field_110978_o + '}';
     }
+
+    /*===================================== FORGE START =====================================*/
+    /**
+     * The result of this function determines is the below 'load' function is called, and the
+     * default vanilla loading code is bypassed completely.
+     * @param manager Main resource manager
+     * @param location File resource location
+     * @return True to use your own custom load code and bypass vanilla loading.
+     */
+    public boolean hasCustomLoader(net.minecraft.client.resources.IResourceManager manager, net.minecraft.util.ResourceLocation location)
+    {
+        return false;
+    }
+
+    /**
+     * Load the specified resource as this sprite's data.
+     * Returning false from this function will prevent this icon from being stitched onto the master texture.
+     * @param manager Main resource manager
+     * @param location File resource location
+     * @param textureGetter accessor for dependencies. All of them will be loaded before this one
+     * @return False to prevent this Icon from being stitched
+     */
+    public boolean load(net.minecraft.client.resources.IResourceManager manager, net.minecraft.util.ResourceLocation location, java.util.function.Function<ResourceLocation, TextureAtlasSprite> textureGetter)
+    {
+        return true;
+    }
+
+    /**
+     * @return all textures that should be loaded before this texture.
+     */
+    public java.util.Collection<ResourceLocation> getDependencies() {
+        return com.google.common.collect.ImmutableList.of();
+    }
+
+    /*===================================== FORGE END ======================================*/
+    
+    //op add
+
+    public int getIndexInMap()
+    {
+        return this.indexInMap;
+    }
+
+    public void setIndexInMap(int p_setIndexInMap_1_)
+    {
+        this.indexInMap = p_setIndexInMap_1_;
+    }
+
+    private void fixTransparentColor(int[] p_fixTransparentColor_1_)
+    {
+        if (p_fixTransparentColor_1_ != null)
+        {
+            long i = 0L;
+            long j = 0L;
+            long k = 0L;
+            long l = 0L;
+
+            for (int i1 = 0; i1 < p_fixTransparentColor_1_.length; ++i1)
+            {
+                int j1 = p_fixTransparentColor_1_[i1];
+                int k1 = j1 >> 24 & 255;
+
+                if (k1 >= 16)
+                {
+                    int l1 = j1 >> 16 & 255;
+                    int i2 = j1 >> 8 & 255;
+                    int j2 = j1 & 255;
+                    i += (long)l1;
+                    j += (long)i2;
+                    k += (long)j2;
+                    ++l;
+                }
+            }
+
+            if (l > 0L)
+            {
+                int l2 = (int)(i / l);
+                int i3 = (int)(j / l);
+                int j3 = (int)(k / l);
+                int k3 = l2 << 16 | i3 << 8 | j3;
+
+                for (int l3 = 0; l3 < p_fixTransparentColor_1_.length; ++l3)
+                {
+                    int i4 = p_fixTransparentColor_1_[l3];
+                    int k2 = i4 >> 24 & 255;
+
+                    if (k2 <= 16)
+                    {
+                        p_fixTransparentColor_1_[l3] = k3;
+                    }
+                }
+            }
+        }
+    }
+
+    public double getSpriteU16(float p_getSpriteU16_1_)
+    {
+        float f = this.field_110980_m - this.field_110979_l;
+        return (double)((p_getSpriteU16_1_ - this.field_110979_l) / f * 16.0F);
+    }
+
+    public double getSpriteV16(float p_getSpriteV16_1_)
+    {
+        float f = this.field_110978_o - this.field_110977_n;
+        return (double)((p_getSpriteV16_1_ - this.field_110977_n) / f * 16.0F);
+    }
+
+    public void bindSpriteTexture()
+    {
+        if (this.glSpriteTextureId < 0)
+        {
+            this.glSpriteTextureId = TextureUtil.func_110996_a();
+            TextureUtil.func_180600_a(this.glSpriteTextureId, this.mipmapLevels, this.field_130223_c, this.field_130224_d);
+            TextureUtils.applyAnisotropicLevel();
+        }
+
+        TextureUtils.bindTexture(this.glSpriteTextureId);
+    }
+
+    public void deleteSpriteTexture()
+    {
+        if (this.glSpriteTextureId >= 0)
+        {
+            TextureUtil.func_147942_a(this.glSpriteTextureId);
+            this.glSpriteTextureId = -1;
+        }
+    }
+
+    public float toSingleU(float p_toSingleU_1_)
+    {
+        p_toSingleU_1_ = p_toSingleU_1_ - this.baseU;
+        float f = (float)this.sheetWidth / (float)this.field_130223_c;
+        p_toSingleU_1_ = p_toSingleU_1_ * f;
+        return p_toSingleU_1_;
+    }
+
+    public float toSingleV(float p_toSingleV_1_)
+    {
+        p_toSingleV_1_ = p_toSingleV_1_ - this.baseV;
+        float f = (float)this.sheetHeight / (float)this.field_130224_d;
+        p_toSingleV_1_ = p_toSingleV_1_ * f;
+        return p_toSingleV_1_;
+    }
+
+    public List<int[][]> getFramesTextureData()
+    {
+        List<int[][]> list = new ArrayList<int[][]>();
+        list.addAll(this.field_110976_a);
+        return list;
+    }
+
+    public AnimationMetadataSection getAnimationMetadata()
+    {
+        return this.field_110982_k;
+    }
+
+    public void setAnimationMetadata(AnimationMetadataSection p_setAnimationMetadata_1_)
+    {
+        this.field_110982_k = p_setAnimationMetadata_1_;
+    }
+
+    private void loadShadersSprites()
+    {
+        
+        if (Shaders.configNormalMap)
+        {
+            String s = this.field_110984_i + "_n";
+            ResourceLocation resourcelocation = new ResourceLocation(s);
+            resourcelocation = Config.getTextureMap().completeResourceLocation(resourcelocation);
+
+            if (Config.hasResource(resourcelocation))
+            {
+                this.spriteNormal = new TextureAtlasSprite(s);
+                this.spriteNormal.isShadersSprite = true;
+                this.spriteNormal.func_94217_a(this);
+                System.out.println("a load shaders1");
+                Config.getTextureMap().func_184397_a(Config.getResourceManager(), this.spriteNormal);
+            }
+        }
+
+        if (Shaders.configSpecularMap)
+        {
+            String s1 = this.field_110984_i + "_s";
+            ResourceLocation resourcelocation1 = new ResourceLocation(s1);
+            resourcelocation1 = Config.getTextureMap().completeResourceLocation(resourcelocation1);
+
+            if (Config.hasResource(resourcelocation1))
+            {
+                this.spriteSpecular = new TextureAtlasSprite(s1);
+                this.spriteSpecular.isShadersSprite = true;
+                this.spriteSpecular.func_94217_a(this);
+                System.out.println("a load shaders2");
+                Config.getTextureMap().func_184397_a(Config.getResourceManager(), this.spriteSpecular);
+            }
+        }
+    }
+    //op end
+    
 }
