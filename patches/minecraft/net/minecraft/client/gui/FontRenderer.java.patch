--- ../src-base/minecraft/net/minecraft/client/gui/FontRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/gui/FontRenderer.java
@@ -9,6 +9,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
+import java.util.Properties;
 import java.util.Random;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BufferBuilder;
@@ -24,6 +25,10 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import optifine.Config;
+import optifine.CustomColors;
+import optifine.FontUtils;
+import optifine.GlBlendState;
 import org.apache.commons.io.IOUtils;
 
 @SideOnly(Side.CLIENT)
@@ -35,7 +40,8 @@
     public Random field_78289_c = new Random();
     protected final byte[] field_78287_e = new byte[65536];
     private final int[] field_78285_g = new int[32];
-    protected final ResourceLocation field_111273_g;
+    // op remove final
+    protected ResourceLocation field_111273_g;
     private final TextureManager field_78298_i;
     protected float field_78295_j;
     protected float field_78296_k;
@@ -51,14 +57,29 @@
     private boolean field_78301_u;
     private boolean field_78300_v;
     private boolean field_78299_w;
+    
+    //op add 
+    public GameSettings gameSettings;
+    public ResourceLocation locationFontTextureBase;
+    public boolean enabled = true;
+    public float offsetBold = 1.0F;
+    private float[] charWidthFloat = new float[256];
+    private boolean blend = false;
+    private GlBlendState oldBlendState = new GlBlendState();
 
     public FontRenderer(GameSettings p_i1035_1_, ResourceLocation p_i1035_2_, TextureManager p_i1035_3_, boolean p_i1035_4_)
     {
+        //op add
+        this.gameSettings = p_i1035_1_;
+        this.locationFontTextureBase = p_i1035_2_;
+        
         this.field_111273_g = p_i1035_2_;
         this.field_78298_i = p_i1035_3_;
         this.field_78293_l = p_i1035_4_;
-        p_i1035_3_.func_110577_a(this.field_111273_g);
 
+        this.field_111273_g = FontUtils.getHdFontLocation(this.locationFontTextureBase); // op
+        bindTexture(this.field_111273_g);
+
         for (int i = 0; i < 32; ++i)
         {
             int j = (i >> 3 & 1) * 85;
@@ -96,6 +117,14 @@
 
     public void func_110549_a(IResourceManager p_110549_1_)
     {
+        //op add
+        this.field_111273_g = FontUtils.getHdFontLocation(this.locationFontTextureBase);
+
+        for (int i = 0; i < field_111274_c.length; ++i)
+        {
+            field_111274_c[i] = null;
+        }
+        //op end
         this.func_111272_d();
         this.func_98306_d();
     }
@@ -107,7 +136,7 @@
 
         try
         {
-            iresource = Minecraft.func_71410_x().func_110442_L().func_110536_a(this.field_111273_g);
+            iresource = getResource(this.field_111273_g);
             bufferedimage = TextureUtil.func_177053_a(iresource.func_110527_b());
         }
         catch (IOException ioexception)
@@ -119,7 +148,7 @@
             IOUtils.closeQuietly((Closeable)iresource);
         }
 
-        int lvt_3_2_ = bufferedimage.getWidth();
+       /* int lvt_3_2_ = bufferedimage.getWidth();
         int lvt_4_1_ = bufferedimage.getHeight();
         int[] lvt_5_1_ = new int[lvt_3_2_ * lvt_4_1_];
         bufferedimage.getRGB(0, 0, lvt_3_2_, lvt_4_1_, lvt_5_1_, 0, lvt_3_2_);
@@ -135,7 +164,7 @@
 
             if (lvt_10_1_ == 32)
             {
-                this.field_78286_d[lvt_10_1_] = 4;
+                this.charWidth[lvt_10_1_] = 4;
             }
 
             int l1;
@@ -162,8 +191,82 @@
             }
 
             ++l1;
-            this.field_78286_d[lvt_10_1_] = (int)(0.5D + (double)((float)l1 * lvt_9_1_)) + 1;
+            this.charWidth[lvt_10_1_] = (int)(0.5D + (double)((float)l1 * lvt_9_1_)) + 1;
+        }*/
+        Properties props = FontUtils.readFontProperties(this.field_111273_g);
+        this.blend = FontUtils.readBoolean(props, "blend", false);
+        int imgWidth = bufferedimage.getWidth();
+        int imgHeight = bufferedimage.getHeight();
+        int charW = imgWidth / 16;
+        int charH = imgHeight / 16;
+        float kx = (float)imgWidth / 128.0F;
+        float boldScaleFactor = Config.limit(kx, 1.0F, 2.0F);
+        this.offsetBold = 1.0F / boldScaleFactor;
+        float offsetBoldConfig = FontUtils.readFloat(props, "offsetBold", -1.0F);
+
+        if (offsetBoldConfig >= 0.0F)
+        {
+            this.offsetBold = offsetBoldConfig;
         }
+
+        int[] aint = new int[imgWidth * imgHeight];
+        bufferedimage.getRGB(0, 0, imgWidth, imgHeight, aint, 0, imgWidth);
+
+        for (int i1 = 0; i1 < 256; ++i1)
+        {
+            int j1 = i1 % 16;
+            int k1 = i1 / 16;
+            int l1 = 0;
+
+            for (l1 = charW - 1; l1 >= 0; --l1)
+            {
+                int i2 = j1 * charW + l1;
+                boolean flag = true;
+
+                for (int j2 = 0; j2 < charH && flag; ++j2)
+                {
+                    int k2 = (k1 * charH + j2) * imgWidth;
+                    int l2 = aint[i2 + k2];
+                    int i3 = l2 >> 24 & 255;
+
+                    if (i3 > 16)
+                    {
+                        flag = false;
+                    }
+                }
+
+                if (!flag)
+                {
+                    break;
+                }
+            }
+
+            if (i1 == 65)
+            {
+                i1 = i1;
+            }
+
+            if (i1 == 32)
+            {
+                if (charW <= 8)
+                {
+                    l1 = (int)(2.0F * kx);
+                }
+                else
+                {
+                    l1 = (int)(1.5F * kx);
+                }
+            }
+
+            this.charWidthFloat[i1] = (float)(l1 + 1) / kx + 1.0F;
+        }
+
+        FontUtils.readCustomCharWidths(props, this.charWidthFloat);
+
+        for (int j3 = 0; j3 < this.field_78286_d.length; ++j3)
+        {
+            this.field_78286_d[j3] = Math.round(this.charWidthFloat[j3]);
+        }
     }
 
     private void func_98306_d()
@@ -172,7 +275,7 @@
 
         try
         {
-            iresource = Minecraft.func_71410_x().func_110442_L().func_110536_a(new ResourceLocation("font/glyph_sizes.bin"));
+            iresource = getResource(new ResourceLocation("font/glyph_sizes.bin"));
             iresource.func_110527_b().read(this.field_78287_e);
         }
         catch (IOException ioexception)
@@ -187,6 +290,7 @@
 
     private float func_181559_a(char p_181559_1_, boolean p_181559_2_)
     {
+        if (p_181559_1_ == 160) return 4.0F; // forge: display nbsp as space. MC-2595
         if (p_181559_1_ == ' ')
         {
             return 4.0F;
@@ -203,7 +307,7 @@
         int i = p_78266_1_ % 16 * 8;
         int j = p_78266_1_ / 16 * 8;
         int k = p_78266_2_ ? 1 : 0;
-        this.field_78298_i.func_110577_a(this.field_111273_g);
+        bindTexture(this.field_111273_g);
         int l = this.field_78286_d[p_78266_1_];
         float f = (float)l - 0.01F;
         GlStateManager.func_187447_r(5);
@@ -224,6 +328,7 @@
         if (field_111274_c[p_111271_1_] == null)
         {
             field_111274_c[p_111271_1_] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", p_111271_1_));
+            field_111274_c[p_111271_1_] = FontUtils.getHdFontLocation(field_111274_c[p_111271_1_]);//op add
         }
 
         return field_111274_c[p_111271_1_];
@@ -231,7 +336,7 @@
 
     private void func_78257_a(int p_78257_1_)
     {
-        this.field_78298_i.func_110577_a(this.func_111271_a(p_78257_1_));
+        bindTexture(this.func_111271_a(p_78257_1_));
     }
 
     protected float func_78277_a(char p_78277_1_, boolean p_78277_2_)
@@ -280,7 +385,16 @@
 
     public int func_175065_a(String p_175065_1_, float p_175065_2_, float p_175065_3_, int p_175065_4_, boolean p_175065_5_)
     {
-        GlStateManager.func_179141_d();
+        enableAlpha();
+        //op add
+        if (this.blend)
+        {
+            GlStateManager.getBlendState(this.oldBlendState);
+            GlStateManager.func_179147_l();
+            GlStateManager.func_187401_a(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        }
+
+        //op end
         this.func_78265_b();
         int i;
 
@@ -293,6 +407,13 @@
         {
             i = this.func_180455_b(p_175065_1_, p_175065_2_, p_175065_3_, p_175065_4_, false);
         }
+        
+        //op add
+        if (this.blend)
+        {
+            GlStateManager.setBlendState(this.oldBlendState);
+        }
+        //op end
 
         return i;
     }
@@ -349,8 +470,14 @@
                     }
 
                     int j1 = this.field_78285_g[i1];
+                    //op add
+                    if (Config.isCustomColors())
+                    {
+                        j1 = CustomColors.getTextColor(i1, j1);
+                    }                    
+                    //op end
                     this.field_78304_r = j1;
-                    GlStateManager.func_179131_c((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.field_78305_q);
+                    setColor((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.field_78305_q);
                 }
                 else if (i1 == 16)
                 {
@@ -379,7 +506,7 @@
                     this.field_78299_w = false;
                     this.field_78300_v = false;
                     this.field_78301_u = false;
-                    GlStateManager.func_179131_c(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
+                    setColor(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
                 }
 
                 ++i;
@@ -407,7 +534,9 @@
                     c0 = c1;
                 }
 
-                float f1 = this.field_78293_l ? 0.5F : 1.0F;
+                //float f1 = j == -1 || this.unicodeFlag ? 0.5f : 1f;
+                //op modify
+                float f1 = j != -1 && !this.field_78293_l ? this.offsetBold : 0.5F;
                 boolean flag = (c0 == 0 || j == -1 || this.field_78293_l) && p_78255_2_;
 
                 if (flag)
@@ -445,7 +574,16 @@
 
                     ++f;
                 }
+                doDraw(f);
+            }
+        }
+    }
 
+    protected void doDraw(float f)
+    {
+        {
+            {
+
                 if (this.field_78299_w)
                 {
                     Tessellator tessellator = Tessellator.func_178181_a();
@@ -518,7 +656,7 @@
             this.field_78292_o = (float)(p_180455_4_ >> 8 & 255) / 255.0F;
             this.field_78306_p = (float)(p_180455_4_ & 255) / 255.0F;
             this.field_78305_q = (float)(p_180455_4_ >> 24 & 255) / 255.0F;
-            GlStateManager.func_179131_c(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
+            setColor(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
             this.field_78295_j = p_180455_2_;
             this.field_78296_k = p_180455_3_;
             this.func_78255_a(p_180455_1_, p_180455_5_);
@@ -576,6 +714,7 @@
 
     public int func_78263_a(char p_78263_1_)
     {
+        if (p_78263_1_ == 160) return 4; // forge: display nbsp as space. MC-2595
         if (p_78263_1_ == 167)
         {
             return -1;
@@ -728,20 +867,24 @@
 
     String func_78280_d(String p_78280_1_, int p_78280_2_)
     {
-        int i = this.func_78259_e(p_78280_1_, p_78280_2_);
-
-        if (p_78280_1_.length() <= i)
+        //op add
+        if (p_78280_1_.length() <= 1)
         {
             return p_78280_1_;
         }
-        else
-        {
-            String s = p_78280_1_.substring(0, i);
-            char c0 = p_78280_1_.charAt(i);
-            boolean flag = c0 == ' ' || c0 == '\n';
-            String s1 = func_78282_e(s) + p_78280_1_.substring(i + (flag ? 1 : 0));
-            return s + "\n" + this.func_78280_d(s1, p_78280_2_);
-        }
+        else { // op end
+            int i = this.func_78259_e(p_78280_1_, p_78280_2_);
+
+            if (p_78280_1_.length() <= i) {
+                return p_78280_1_;
+            } else {
+                String s = p_78280_1_.substring(0, i);
+                char c0 = p_78280_1_.charAt(i);
+                boolean flag = c0 == ' ' || c0 == '\n';
+                String s1 = func_78282_e(s) + p_78280_1_.substring(i + (flag ? 1 : 0));
+                return s + "\n" + this.func_78280_d(s1, p_78280_2_);
+            }
+        }//op add
     }
 
     private int func_78259_e(String p_78259_1_, int p_78259_2_)
@@ -849,9 +992,46 @@
         return this.field_78294_m;
     }
 
+    protected void setColor(float r, float g, float b, float a)
+    {
+        GlStateManager.func_179131_c(r,g,b,a);
+    }
+
+    protected void enableAlpha()
+    {
+        GlStateManager.func_179141_d();
+    }
+
+    protected void bindTexture(ResourceLocation location)
+    {
+        field_78298_i.func_110577_a(location);
+    }
+
+    protected IResource getResource(ResourceLocation location) throws IOException
+    {
+        return Minecraft.func_71410_x().func_110442_L().func_110536_a(location);
+    }
+
     public int func_175064_b(char p_175064_1_)
     {
+        //int i = "0123456789abcdef".indexOf(character);
+        //return i >= 0 && i < this.colorCode.length ? this.colorCode[i] : -1;
         int i = "0123456789abcdef".indexOf(p_175064_1_);
-        return i >= 0 && i < this.field_78285_g.length ? this.field_78285_g[i] : -1;
+
+        if (i >= 0 && i < this.field_78285_g.length)
+        {
+            int j = this.field_78285_g[i];
+
+            if (Config.isCustomColors())
+            {
+                j = CustomColors.getTextColor(i, j);
+            }
+
+            return j;
+        }
+        else
+        {
+            return 16777215;
+        }
     }
 }
