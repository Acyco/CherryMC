--- ../src-base/minecraft/net/minecraft/client/settings/GameSettings.java
+++ ../src-work/minecraft/net/minecraft/client/settings/GameSettings.java
@@ -6,15 +6,19 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.Gson;
+
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.Writer;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -22,6 +26,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiNewChat;
 import net.minecraft.client.gui.chat.NarratorChatListener;
+import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.client.tutorial.TutorialSteps;
@@ -37,6 +42,16 @@
 import net.minecraft.world.EnumDifficulty;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import optifine.ClearWater;
+import optifine.Config;
+import optifine.CustomColors;
+import optifine.CustomGuis;
+import optifine.CustomSky;
+import optifine.DynamicLights;
+import optifine.Lang;
+import optifine.NaturalTextures;
+import optifine.RandomMobs;
+import optifine.Reflector;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
@@ -44,6 +59,7 @@
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import shadersmod.client.Shaders;
 
 @SideOnly(Side.CLIENT)
 public class GameSettings
@@ -162,9 +178,93 @@
     public int field_192571_R;
     public String field_74363_ab;
     public boolean field_151455_aw;
+    //op
+    public int ofFogType = 1;
+    public float ofFogStart = 0.8F;
+    public int ofMipmapType = 0;
+    public boolean ofOcclusionFancy = false;
+    public boolean ofSmoothFps = false;
+    public boolean ofSmoothWorld = Config.isSingleProcessor();
+    public boolean ofLazyChunkLoading = Config.isSingleProcessor();
+    public float ofAoLevel = 1.0F;
+    public int ofAaLevel = 0;
+    public int ofAfLevel = 1;
+    public int ofClouds = 0;
+    public float ofCloudsHeight = 0.0F;
+    public int ofTrees = 0;
+    public int ofRain = 0;
+    public int ofDroppedItems = 0;
+    public int ofBetterGrass = 3;
+    public int ofAutoSaveTicks = 4000;
+    public boolean ofLagometer = false;
+    public boolean ofProfiler = false;
+    public boolean ofShowFps = false;
+    public boolean ofWeather = true;
+    public boolean ofSky = true;
+    public boolean ofStars = true;
+    public boolean ofSunMoon = true;
+    public int ofVignette = 0;
+    public int ofChunkUpdates = 1;
+    public boolean ofChunkUpdatesDynamic = false;
+    public int ofTime = 0;
+    public boolean ofClearWater = false;
+    public boolean ofBetterSnow = false;
+    public String ofFullscreenMode = "Default";
+    public boolean ofSwampColors = true;
+    public boolean ofRandomMobs = true;
+    public boolean ofSmoothBiomes = true;
+    public boolean ofCustomFonts = true;
+    public boolean ofCustomColors = true;
+    public boolean ofCustomSky = true;
+    public boolean ofShowCapes = true;
+    public int ofConnectedTextures = 2;
+    public boolean ofCustomItems = true;
+    public boolean ofNaturalTextures = false;
+    public boolean ofFastMath = false;
+    public boolean ofFastRender = false;
+    public int ofTranslucentBlocks = 0;
+    public boolean ofDynamicFov = true;
+    public boolean ofAlternateBlocks = true;
+    public int ofDynamicLights = 3;
+    public boolean ofCustomEntityModels = true;
+    public boolean ofCustomGuis = true;
+    public int ofScreenshotSize = 1;
+    public int ofAnimatedWater = 0;
+    public int ofAnimatedLava = 0;
+    public boolean ofAnimatedFire = true;
+    public boolean ofAnimatedPortal = true;
+    public boolean ofAnimatedRedstone = true;
+    public boolean ofAnimatedExplosion = true;
+    public boolean ofAnimatedFlame = true;
+    public boolean ofAnimatedSmoke = true;
+    public boolean ofVoidParticles = true;
+    public boolean ofWaterParticles = true;
+    public boolean ofRainSplash = true;
+    public boolean ofPortalParticles = true;
+    public boolean ofPotionParticles = true;
+    public boolean ofFireworkParticles = true;
+    public boolean ofDrippingWaterLava = true;
+    public boolean ofAnimatedTerrain = true;
+    public boolean ofAnimatedTextures = true;
+    public static final int DEFAULT = 0;
+    public static final int FAST = 1;
+    public static final int FANCY = 2;
+    public static final int OFF = 3;
+    public static final int SMART = 4;
+    public static final int ANIM_ON = 0;
+    public static final int ANIM_GENERATED = 1;
+    public static final int ANIM_OFF = 2;
+    public static final String DEFAULT_STR = "Default";
+    private static final int[] OF_TREES_VALUES = new int[] {0, 1, 4, 2};
+    private static final int[] OF_DYNAMIC_LIGHTS = new int[] {3, 1, 2};
+    private static final String[] KEYS_DYNAMIC_LIGHTS = new String[] {"options.off", "options.graphics.fast", "options.graphics.fancy"};
+    public KeyBinding ofKeyBindZoom;
+    private File optionsFileOF;
+    private boolean needsResourceRefresh = false;
 
     public GameSettings(Minecraft p_i46326_1_, File p_i46326_2_)
     {
+        setForgeKeybindProperties();
         this.field_74324_K = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152395_am, this.field_178883_an, this.field_186718_X, this.field_193629_ap, this.field_193630_aq, this.field_194146_ao}, this.field_151456_ac);
         this.field_74318_M = EnumDifficulty.NORMAL;
         this.field_74332_R = "";
@@ -183,11 +283,19 @@
         }
 
         this.field_151451_c = p_i46326_1_.func_147111_S() ? 12 : 8;
-        this.func_74300_a();
+        this.optionsFileOF = new File(p_i46326_2_, "optionsof.txt");
+        this.field_74350_i = (int) Options.FRAMERATE_LIMIT.func_148267_f();
+        this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 46, "key.categories.misc");
+        this.field_74324_K = (KeyBinding[])ArrayUtils.add(this.field_74324_K, this.ofKeyBindZoom);
+        Options.RENDER_DISTANCE.func_148263_a(32.0F);
+        this.field_151451_c = 8;
+        this.func_74300_a();   
+        Config.initGameSettings(this);
     }
 
     public GameSettings()
     {
+        setForgeKeybindProperties();
         this.field_74324_K = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152395_am, this.field_178883_an, this.field_186718_X, this.field_193629_ap, this.field_193630_aq, this.field_194146_ao}, this.field_151456_ac);
         this.field_74318_M = EnumDifficulty.NORMAL;
         this.field_74332_R = "";
@@ -239,6 +347,7 @@
 
     public void func_74304_a(GameSettings.Options p_74304_1_, float p_74304_2_)
     {
+        this.setOptionFloatValueOF(p_74304_1_, p_74304_2_);
         if (p_74304_1_ == GameSettings.Options.SENSITIVITY)
         {
             this.field_74341_c = p_74304_2_;
@@ -299,7 +408,7 @@
                 this.field_74317_L.func_147117_R().func_147633_a(this.field_151442_I);
                 this.field_74317_L.func_110434_K().func_110577_a(TextureMap.field_110575_b);
                 this.field_74317_L.func_147117_R().func_174937_a(false, this.field_151442_I > 0);
-                this.field_74317_L.func_175603_A();
+                this.needsBlockModelRefresh = true; // FORGE: fix for MC-64581 very laggy mipmap slider
             }
         }
 
@@ -312,6 +421,7 @@
 
     public void func_74306_a(GameSettings.Options p_74306_1_, int p_74306_2_)
     {
+        this.setOptionValueOF(p_74306_1_, p_74306_2_);
         if (p_74306_1_ == GameSettings.Options.RENDER_DISTANCE)
         {
             this.func_74304_a(p_74306_1_, MathHelper.func_76131_a((float)(this.field_151451_c + p_74306_2_), p_74306_1_.func_186707_e(), p_74306_1_.func_148267_f()));
@@ -361,7 +471,7 @@
         if (p_74306_1_ == GameSettings.Options.ANAGLYPH)
         {
             this.field_74337_g = !this.field_74337_g;
-            this.field_74317_L.func_110436_a();
+            net.minecraftforge.fml.client.FMLClientHandler.instance().refreshResources(net.minecraftforge.client.resource.VanillaResourceType.TEXTURES);
         }
 
         if (p_74306_1_ == GameSettings.Options.GRAPHICS)
@@ -477,6 +587,12 @@
 
     public float func_74296_a(GameSettings.Options p_74296_1_)
     {
+        float f = this.getOptionFloatValueOF(p_74296_1_);
+
+        if (f != Float.MAX_VALUE)
+        {
+            return f;
+        }
         if (p_74296_1_ == GameSettings.Options.FOV)
         {
             return this.field_74334_X;
@@ -586,144 +702,94 @@
 
     public String func_74297_c(GameSettings.Options p_74297_1_)
     {
-        String s = I18n.func_135052_a(p_74297_1_.func_74378_d()) + ": ";
+        String ss = this.getKeyBindingOF(p_74297_1_);
 
-        if (p_74297_1_.func_74380_a())
+        if (ss!= null)
         {
-            float f1 = this.func_74296_a(p_74297_1_);
-            float f = p_74297_1_.func_148266_c(f1);
+            return ss;
+        }
+        else {
+            String s = I18n.func_135052_a(p_74297_1_.func_74378_d()) + ": ";
 
-            if (p_74297_1_ == GameSettings.Options.SENSITIVITY)
-            {
-                if (f == 0.0F)
-                {
-                    return s + I18n.func_135052_a("options.sensitivity.min");
+            if (p_74297_1_.func_74380_a()) {
+                float f1 = this.func_74296_a(p_74297_1_);
+                float f = p_74297_1_.func_148266_c(f1);
+
+                if (p_74297_1_ == GameSettings.Options.SENSITIVITY) {
+                    if (f == 0.0F) {
+                        return s + I18n.func_135052_a("options.sensitivity.min");
+                    } else {
+                        return f == 1.0F ? s + I18n.func_135052_a("options.sensitivity.max") : s + (int) (f * 200.0F) + "%";
+                    }
+                } else if (p_74297_1_ == GameSettings.Options.FOV) {
+                    if (f1 == 70.0F) {
+                        return s + I18n.func_135052_a("options.fov.min");
+                    } else {
+                        return f1 == 110.0F ? s + I18n.func_135052_a("options.fov.max") : s + (int) f1;
+                    }
+                } else if (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT) {
+                    return f1 == p_74297_1_.field_148272_O ? s + I18n.func_135052_a("options.framerateLimit.max") : s + I18n.func_135052_a("options.framerate", (int) f1);
+                } else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS) {
+                    return f1 == p_74297_1_.field_148271_N ? s + I18n.func_135052_a("options.cloudHeight.min") : s + ((int) f1 + 128);
+                } else if (p_74297_1_ == GameSettings.Options.GAMMA) {
+                    if (f == 0.0F) {
+                        return s + I18n.func_135052_a("options.gamma.min");
+                    } else {
+                        return f == 1.0F ? s + I18n.func_135052_a("options.gamma.max") : s + "+" + (int) (f * 100.0F) + "%";
+                    }
+                } else if (p_74297_1_ == GameSettings.Options.SATURATION) {
+                    return s + (int) (f * 400.0F) + "%";
+                } else if (p_74297_1_ == GameSettings.Options.CHAT_OPACITY) {
+                    return s + (int) (f * 90.0F + 10.0F) + "%";
+                } else if (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED) {
+                    return s + GuiNewChat.func_146243_b(f) + "px";
+                } else if (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED) {
+                    return s + GuiNewChat.func_146243_b(f) + "px";
+                } else if (p_74297_1_ == GameSettings.Options.CHAT_WIDTH) {
+                    return s + GuiNewChat.func_146233_a(f) + "px";
+                } else if (p_74297_1_ == GameSettings.Options.RENDER_DISTANCE) {
+                    return s + I18n.func_135052_a("options.chunks", (int) f1);
+                } else if (p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS) {
+                    return f1 == 0.0F ? s + I18n.func_135052_a("options.off") : s + (int) f1;
+                } else {
+                    return f == 0.0F ? s + I18n.func_135052_a("options.off") : s + (int) (f * 100.0F) + "%";
                 }
-                else
-                {
-                    return f == 1.0F ? s + I18n.func_135052_a("options.sensitivity.max") : s + (int)(f * 200.0F) + "%";
+            } else if (p_74297_1_.func_74382_b()) {
+                boolean flag = this.func_74308_b(p_74297_1_);
+                return flag ? s + I18n.func_135052_a("options.on") : s + I18n.func_135052_a("options.off");
+            } else if (p_74297_1_ == GameSettings.Options.MAIN_HAND) {
+                return s + this.field_186715_A;
+            } else if (p_74297_1_ == GameSettings.Options.GUI_SCALE) {
+                return s + func_74299_a(field_74367_ae, this.field_74335_Z);
+            } else if (p_74297_1_ == GameSettings.Options.CHAT_VISIBILITY) {
+                return s + I18n.func_135052_a(this.field_74343_n.func_151429_b());
+            } else if (p_74297_1_ == GameSettings.Options.PARTICLES) {
+                return s + func_74299_a(field_74364_ag, this.field_74362_aa);
+            } else if (p_74297_1_ == GameSettings.Options.AMBIENT_OCCLUSION) {
+                return s + func_74299_a(field_98303_au, this.field_74348_k);
+            } else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS) {
+                return s + func_74299_a(field_181149_aW, this.field_74345_l);
+            } else if (p_74297_1_ == GameSettings.Options.GRAPHICS) {
+                if (this.field_74347_j) {
+                    return s + I18n.func_135052_a("options.graphics.fancy");
+                } else {
+                    String s1 = "options.graphics.fast";
+                    return s + I18n.func_135052_a("options.graphics.fast");
                 }
+            } else if (p_74297_1_ == GameSettings.Options.ATTACK_INDICATOR) {
+                return s + func_74299_a(field_186713_aK, this.field_186716_M);
+            } else if (p_74297_1_ == GameSettings.Options.NARRATOR) {
+                return NarratorChatListener.field_193643_a.func_193640_a() ? s + func_74299_a(field_193632_b, this.field_192571_R) : s + I18n.func_135052_a("options.narrator.notavailable");
+            } else {
+                return s;
             }
-            else if (p_74297_1_ == GameSettings.Options.FOV)
-            {
-                if (f1 == 70.0F)
-                {
-                    return s + I18n.func_135052_a("options.fov.min");
-                }
-                else
-                {
-                    return f1 == 110.0F ? s + I18n.func_135052_a("options.fov.max") : s + (int)f1;
-                }
-            }
-            else if (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT)
-            {
-                return f1 == p_74297_1_.field_148272_O ? s + I18n.func_135052_a("options.framerateLimit.max") : s + I18n.func_135052_a("options.framerate", (int)f1);
-            }
-            else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
-            {
-                return f1 == p_74297_1_.field_148271_N ? s + I18n.func_135052_a("options.cloudHeight.min") : s + ((int)f1 + 128);
-            }
-            else if (p_74297_1_ == GameSettings.Options.GAMMA)
-            {
-                if (f == 0.0F)
-                {
-                    return s + I18n.func_135052_a("options.gamma.min");
-                }
-                else
-                {
-                    return f == 1.0F ? s + I18n.func_135052_a("options.gamma.max") : s + "+" + (int)(f * 100.0F) + "%";
-                }
-            }
-            else if (p_74297_1_ == GameSettings.Options.SATURATION)
-            {
-                return s + (int)(f * 400.0F) + "%";
-            }
-            else if (p_74297_1_ == GameSettings.Options.CHAT_OPACITY)
-            {
-                return s + (int)(f * 90.0F + 10.0F) + "%";
-            }
-            else if (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED)
-            {
-                return s + GuiNewChat.func_146243_b(f) + "px";
-            }
-            else if (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED)
-            {
-                return s + GuiNewChat.func_146243_b(f) + "px";
-            }
-            else if (p_74297_1_ == GameSettings.Options.CHAT_WIDTH)
-            {
-                return s + GuiNewChat.func_146233_a(f) + "px";
-            }
-            else if (p_74297_1_ == GameSettings.Options.RENDER_DISTANCE)
-            {
-                return s + I18n.func_135052_a("options.chunks", (int)f1);
-            }
-            else if (p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS)
-            {
-                return f1 == 0.0F ? s + I18n.func_135052_a("options.off") : s + (int)f1;
-            }
-            else
-            {
-                return f == 0.0F ? s + I18n.func_135052_a("options.off") : s + (int)(f * 100.0F) + "%";
-            }
+
         }
-        else if (p_74297_1_.func_74382_b())
-        {
-            boolean flag = this.func_74308_b(p_74297_1_);
-            return flag ? s + I18n.func_135052_a("options.on") : s + I18n.func_135052_a("options.off");
-        }
-        else if (p_74297_1_ == GameSettings.Options.MAIN_HAND)
-        {
-            return s + this.field_186715_A;
-        }
-        else if (p_74297_1_ == GameSettings.Options.GUI_SCALE)
-        {
-            return s + func_74299_a(field_74367_ae, this.field_74335_Z);
-        }
-        else if (p_74297_1_ == GameSettings.Options.CHAT_VISIBILITY)
-        {
-            return s + I18n.func_135052_a(this.field_74343_n.func_151429_b());
-        }
-        else if (p_74297_1_ == GameSettings.Options.PARTICLES)
-        {
-            return s + func_74299_a(field_74364_ag, this.field_74362_aa);
-        }
-        else if (p_74297_1_ == GameSettings.Options.AMBIENT_OCCLUSION)
-        {
-            return s + func_74299_a(field_98303_au, this.field_74348_k);
-        }
-        else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
-        {
-            return s + func_74299_a(field_181149_aW, this.field_74345_l);
-        }
-        else if (p_74297_1_ == GameSettings.Options.GRAPHICS)
-        {
-            if (this.field_74347_j)
-            {
-                return s + I18n.func_135052_a("options.graphics.fancy");
-            }
-            else
-            {
-                String s1 = "options.graphics.fast";
-                return s + I18n.func_135052_a("options.graphics.fast");
-            }
-        }
-        else if (p_74297_1_ == GameSettings.Options.ATTACK_INDICATOR)
-        {
-            return s + func_74299_a(field_186713_aK, this.field_186716_M);
-        }
-        else if (p_74297_1_ == GameSettings.Options.NARRATOR)
-        {
-            return NarratorChatListener.field_193643_a.func_193640_a() ? s + func_74299_a(field_193632_b, this.field_192571_R) : s + I18n.func_135052_a("options.narrator.notavailable");
-        }
-        else
-        {
-            return s;
-        }
     }
 
     public void func_74300_a()
     {
+        FileInputStream fileInputStream = null; // Forge: fix MC-151173
         try
         {
             if (!this.field_74354_ai.exists())
@@ -732,7 +798,7 @@
             }
 
             this.field_186714_aM.clear();
-            List<String> list = IOUtils.readLines(new FileInputStream(this.field_74354_ai));
+            List<String> list = IOUtils.readLines(fileInputStream = new FileInputStream(this.field_74354_ai), StandardCharsets.UTF_8); // Forge: fix MC-117449, MC-151173
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             for (String s : list)
@@ -1068,7 +1134,12 @@
                     {
                         if (s1.equals("key_" + keybinding.func_151464_g()))
                         {
-                            keybinding.func_151462_b(Integer.parseInt(s2));
+                            if (s2.indexOf(':') != -1)
+                            {
+                                String[] t = s2.split(":");
+                                keybinding.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.valueFromString(t[1]), Integer.parseInt(t[0]));
+                            } else
+                            keybinding.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.NONE, Integer.parseInt(s2));
                         }
                     }
 
@@ -1100,6 +1171,8 @@
         {
             field_151454_ax.error("Failed to load options", (Throwable)exception);
         }
+        finally { IOUtils.closeQuietly(fileInputStream); } // Forge: fix MC-151173
+        this.loadOfOptions();
     }
 
     private NBTTagCompound func_189988_a(NBTTagCompound p_189988_1_)
@@ -1132,6 +1205,7 @@
 
     public void func_74303_b()
     {
+        if (net.minecraftforge.fml.client.FMLClientHandler.instance().isLoading()) return;
         PrintWriter printwriter = null;
 
         try
@@ -1206,7 +1280,8 @@
 
             for (KeyBinding keybinding : this.field_74324_K)
             {
-                printwriter.println("key_" + keybinding.func_151464_g() + ":" + keybinding.func_151463_i());
+                String keyString = "key_" + keybinding.func_151464_g() + ":" + keybinding.func_151463_i();
+                printwriter.println(keybinding.getKeyModifier() != net.minecraftforge.client.settings.KeyModifier.NONE ? keyString + ":" + keybinding.getKeyModifier() : keyString);
             }
 
             for (SoundCategory soundcategory : SoundCategory.values())
@@ -1228,6 +1303,7 @@
             IOUtils.closeQuietly((Writer)printwriter);
         }
 
+        this.saveOfOptions();
         this.func_82879_c();
     }
 
@@ -1299,7 +1375,1824 @@
     {
         return this.field_181150_U;
     }
+    
+    //op add
 
+    private void setOptionFloatValueOF(Options p_setOptionFloatValueOF_1_, float p_setOptionFloatValueOF_2_)
+    {
+        if (p_setOptionFloatValueOF_1_ == Options.CLOUD_HEIGHT)
+        {
+            this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
+            this.field_74317_L.field_71438_f.resetClouds();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == Options.AO_LEVEL)
+        {
+            this.ofAoLevel = p_setOptionFloatValueOF_2_;
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == Options.AA_LEVEL)
+        {
+            int i = (int)p_setOptionFloatValueOF_2_;
+
+            if (i > 0 && Config.isShaders())
+            {
+                Config.showGuiMessage(Lang.get("of.message.aa.shaders1"), Lang.get("of.message.aa.shaders2"));
+                return;
+            }
+
+            int[] aint = new int[] {0, 2, 4, 6, 8, 12, 16};
+            this.ofAaLevel = 0;
+
+            for (int j = 0; j < aint.length; ++j)
+            {
+                if (i >= aint[j])
+                {
+                    this.ofAaLevel = aint[j];
+                }
+            }
+
+            this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+        }
+
+        if (p_setOptionFloatValueOF_1_ == Options.AF_LEVEL)
+        {
+            int k = (int)p_setOptionFloatValueOF_2_;
+
+            if (k > 1 && Config.isShaders())
+            {
+                Config.showGuiMessage(Lang.get("of.message.af.shaders1"), Lang.get("of.message.af.shaders2"));
+                return;
+            }
+
+            for (this.ofAfLevel = 1; this.ofAfLevel * 2 <= k; this.ofAfLevel *= 2)
+            {
+                ;
+            }
+
+            this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == Options.MIPMAP_TYPE)
+        {
+            int l = (int)p_setOptionFloatValueOF_2_;
+            this.ofMipmapType = Config.limit(l, 0, 3);
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == Options.FULLSCREEN_MODE)
+        {
+            int i1 = (int)p_setOptionFloatValueOF_2_ - 1;
+            String[] astring = Config.getDisplayModeNames();
+
+            if (i1 < 0 || i1 >= astring.length)
+            {
+                this.ofFullscreenMode = "Default";
+                return;
+            }
+
+            this.ofFullscreenMode = astring[i1];
+        }
+    }
+
+    private float getOptionFloatValueOF(Options p_getOptionFloatValueOF_1_)
+    {
+        if (p_getOptionFloatValueOF_1_ == Options.CLOUD_HEIGHT)
+        {
+            return this.ofCloudsHeight;
+        }
+        else if (p_getOptionFloatValueOF_1_ == Options.AO_LEVEL)
+        {
+            return this.ofAoLevel;
+        }
+        else if (p_getOptionFloatValueOF_1_ == Options.AA_LEVEL)
+        {
+            return (float)this.ofAaLevel;
+        }
+        else if (p_getOptionFloatValueOF_1_ == Options.AF_LEVEL)
+        {
+            return (float)this.ofAfLevel;
+        }
+        else if (p_getOptionFloatValueOF_1_ == Options.MIPMAP_TYPE)
+        {
+            return (float)this.ofMipmapType;
+        }
+        else if (p_getOptionFloatValueOF_1_ == Options.FRAMERATE_LIMIT)
+        {
+            return (float)this.field_74350_i == Options.FRAMERATE_LIMIT.func_148267_f() && this.field_74352_v ? 0.0F : (float)this.field_74350_i;
+        }
+        else if (p_getOptionFloatValueOF_1_ == Options.FULLSCREEN_MODE)
+        {
+            if (this.ofFullscreenMode.equals("Default"))
+            {
+                return 0.0F;
+            }
+            else
+            {
+                List list = Arrays.asList(Config.getDisplayModeNames());
+                int i = list.indexOf(this.ofFullscreenMode);
+                return i < 0 ? 0.0F : (float)(i + 1);
+            }
+        }
+        else
+        {
+            return Float.MAX_VALUE;
+        }
+    }
+
+    private void setOptionValueOF(Options p_setOptionValueOF_1_, int p_setOptionValueOF_2_)
+    {
+        if (p_setOptionValueOF_1_ == Options.FOG_FANCY)
+        {
+            switch (this.ofFogType)
+            {
+                case 1:
+                    this.ofFogType = 2;
+
+                    if (!Config.isFancyFogAvailable())
+                    {
+                        this.ofFogType = 3;
+                    }
+
+                    break;
+
+                case 2:
+                    this.ofFogType = 3;
+                    break;
+
+                case 3:
+                    this.ofFogType = 1;
+                    break;
+
+                default:
+                    this.ofFogType = 1;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.FOG_START)
+        {
+            this.ofFogStart += 0.2F;
+
+            if (this.ofFogStart > 0.81F)
+            {
+                this.ofFogStart = 0.2F;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SMOOTH_FPS)
+        {
+            this.ofSmoothFps = !this.ofSmoothFps;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SMOOTH_WORLD)
+        {
+            this.ofSmoothWorld = !this.ofSmoothWorld;
+            Config.updateThreadPriorities();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CLOUDS)
+        {
+            ++this.ofClouds;
+
+            if (this.ofClouds > 3)
+            {
+                this.ofClouds = 0;
+            }
+
+            this.updateRenderClouds();
+            this.field_74317_L.field_71438_f.resetClouds();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.TREES)
+        {
+            this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.DROPPED_ITEMS)
+        {
+            ++this.ofDroppedItems;
+
+            if (this.ofDroppedItems > 2)
+            {
+                this.ofDroppedItems = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.RAIN)
+        {
+            ++this.ofRain;
+
+            if (this.ofRain > 3)
+            {
+                this.ofRain = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_WATER)
+        {
+            ++this.ofAnimatedWater;
+
+            if (this.ofAnimatedWater == 1)
+            {
+                ++this.ofAnimatedWater;
+            }
+
+            if (this.ofAnimatedWater > 2)
+            {
+                this.ofAnimatedWater = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_LAVA)
+        {
+            ++this.ofAnimatedLava;
+
+            if (this.ofAnimatedLava == 1)
+            {
+                ++this.ofAnimatedLava;
+            }
+
+            if (this.ofAnimatedLava > 2)
+            {
+                this.ofAnimatedLava = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_FIRE)
+        {
+            this.ofAnimatedFire = !this.ofAnimatedFire;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_PORTAL)
+        {
+            this.ofAnimatedPortal = !this.ofAnimatedPortal;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_REDSTONE)
+        {
+            this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_EXPLOSION)
+        {
+            this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_FLAME)
+        {
+            this.ofAnimatedFlame = !this.ofAnimatedFlame;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_SMOKE)
+        {
+            this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.VOID_PARTICLES)
+        {
+            this.ofVoidParticles = !this.ofVoidParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.WATER_PARTICLES)
+        {
+            this.ofWaterParticles = !this.ofWaterParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.PORTAL_PARTICLES)
+        {
+            this.ofPortalParticles = !this.ofPortalParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.POTION_PARTICLES)
+        {
+            this.ofPotionParticles = !this.ofPotionParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.FIREWORK_PARTICLES)
+        {
+            this.ofFireworkParticles = !this.ofFireworkParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.DRIPPING_WATER_LAVA)
+        {
+            this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_TERRAIN)
+        {
+            this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ANIMATED_TEXTURES)
+        {
+            this.ofAnimatedTextures = !this.ofAnimatedTextures;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.RAIN_SPLASH)
+        {
+            this.ofRainSplash = !this.ofRainSplash;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.LAGOMETER)
+        {
+            this.ofLagometer = !this.ofLagometer;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SHOW_FPS)
+        {
+            this.ofShowFps = !this.ofShowFps;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.AUTOSAVE_TICKS)
+        {
+            this.ofAutoSaveTicks *= 10;
+
+            if (this.ofAutoSaveTicks > 40000)
+            {
+                this.ofAutoSaveTicks = 40;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.BETTER_GRASS)
+        {
+            ++this.ofBetterGrass;
+
+            if (this.ofBetterGrass > 3)
+            {
+                this.ofBetterGrass = 1;
+            }
+
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CONNECTED_TEXTURES)
+        {
+            ++this.ofConnectedTextures;
+
+            if (this.ofConnectedTextures > 3)
+            {
+                this.ofConnectedTextures = 1;
+            }
+
+            if (this.ofConnectedTextures == 2)
+            {
+                this.field_74317_L.field_71438_f.func_72712_a();
+            }
+            else
+            {
+                this.field_74317_L.func_110436_a();
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.WEATHER)
+        {
+            this.ofWeather = !this.ofWeather;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SKY)
+        {
+            this.ofSky = !this.ofSky;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.STARS)
+        {
+            this.ofStars = !this.ofStars;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SUN_MOON)
+        {
+            this.ofSunMoon = !this.ofSunMoon;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.VIGNETTE)
+        {
+            ++this.ofVignette;
+
+            if (this.ofVignette > 2)
+            {
+                this.ofVignette = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CHUNK_UPDATES)
+        {
+            ++this.ofChunkUpdates;
+
+            if (this.ofChunkUpdates > 5)
+            {
+                this.ofChunkUpdates = 1;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CHUNK_UPDATES_DYNAMIC)
+        {
+            this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.TIME)
+        {
+            ++this.ofTime;
+
+            if (this.ofTime > 2)
+            {
+                this.ofTime = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CLEAR_WATER)
+        {
+            this.ofClearWater = !this.ofClearWater;
+            this.updateWaterOpacity();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.PROFILER)
+        {
+            this.ofProfiler = !this.ofProfiler;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.BETTER_SNOW)
+        {
+            this.ofBetterSnow = !this.ofBetterSnow;
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SWAMP_COLORS)
+        {
+            this.ofSwampColors = !this.ofSwampColors;
+            CustomColors.updateUseDefaultGrassFoliageColors();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.RANDOM_MOBS)
+        {
+            this.ofRandomMobs = !this.ofRandomMobs;
+            RandomMobs.resetTextures();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SMOOTH_BIOMES)
+        {
+            this.ofSmoothBiomes = !this.ofSmoothBiomes;
+            CustomColors.updateUseDefaultGrassFoliageColors();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CUSTOM_FONTS)
+        {
+            this.ofCustomFonts = !this.ofCustomFonts;
+            this.field_74317_L.field_71466_p.func_110549_a(Config.getResourceManager());
+            this.field_74317_L.field_71464_q.func_110549_a(Config.getResourceManager());
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CUSTOM_COLORS)
+        {
+            this.ofCustomColors = !this.ofCustomColors;
+            CustomColors.update();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CUSTOM_ITEMS)
+        {
+            this.ofCustomItems = !this.ofCustomItems;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CUSTOM_SKY)
+        {
+            this.ofCustomSky = !this.ofCustomSky;
+            CustomSky.update();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SHOW_CAPES)
+        {
+            this.ofShowCapes = !this.ofShowCapes;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.NATURAL_TEXTURES)
+        {
+            this.ofNaturalTextures = !this.ofNaturalTextures;
+            NaturalTextures.update();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.FAST_MATH)
+        {
+            this.ofFastMath = !this.ofFastMath;
+            MathHelper.fastMath = this.ofFastMath;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.FAST_RENDER)
+        {
+            if (!this.ofFastRender && Config.isShaders())
+            {
+                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+                return;
+            }
+
+            this.ofFastRender = !this.ofFastRender;
+
+            if (this.ofFastRender)
+            {
+                this.field_74317_L.field_71460_t.func_181022_b();
+            }
+
+            Config.updateFramebufferSize();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.TRANSLUCENT_BLOCKS)
+        {
+            if (this.ofTranslucentBlocks == 0)
+            {
+                this.ofTranslucentBlocks = 1;
+            }
+            else if (this.ofTranslucentBlocks == 1)
+            {
+                this.ofTranslucentBlocks = 2;
+            }
+            else if (this.ofTranslucentBlocks == 2)
+            {
+                this.ofTranslucentBlocks = 0;
+            }
+            else
+            {
+                this.ofTranslucentBlocks = 0;
+            }
+
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.LAZY_CHUNK_LOADING)
+        {
+            this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
+            Config.updateAvailableProcessors();
+
+            if (!Config.isSingleProcessor())
+            {
+                this.ofLazyChunkLoading = false;
+            }
+
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.DYNAMIC_FOV)
+        {
+            this.ofDynamicFov = !this.ofDynamicFov;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ALTERNATE_BLOCKS)
+        {
+            this.ofAlternateBlocks = !this.ofAlternateBlocks;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.DYNAMIC_LIGHTS)
+        {
+            this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+            DynamicLights.removeLights(this.field_74317_L.field_71438_f);
+        }
+
+        if (p_setOptionValueOF_1_ == Options.SCREENSHOT_SIZE)
+        {
+            ++this.ofScreenshotSize;
+
+            if (this.ofScreenshotSize > 4)
+            {
+                this.ofScreenshotSize = 1;
+            }
+
+            if (!OpenGlHelper.func_148822_b())
+            {
+                this.ofScreenshotSize = 1;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CUSTOM_ENTITY_MODELS)
+        {
+            this.ofCustomEntityModels = !this.ofCustomEntityModels;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.CUSTOM_GUIS)
+        {
+            this.ofCustomGuis = !this.ofCustomGuis;
+            CustomGuis.update();
+        }
+
+        if (p_setOptionValueOF_1_ == Options.HELD_ITEM_TOOLTIPS)
+        {
+            this.field_92117_D = !this.field_92117_D;
+        }
+
+        if (p_setOptionValueOF_1_ == Options.ADVANCED_TOOLTIPS)
+        {
+            this.field_82882_x = !this.field_82882_x;
+        }
+    }
+
+    private String getKeyBindingOF(Options p_getKeyBindingOF_1_)
+    {
+        String s = I18n.func_135052_a(p_getKeyBindingOF_1_.func_74378_d()) + ": ";
+
+        if (s == null)
+        {
+            s = p_getKeyBindingOF_1_.func_74378_d();
+        }
+
+        if (p_getKeyBindingOF_1_ == Options.RENDER_DISTANCE)
+        {
+            int l = (int)this.func_74296_a(p_getKeyBindingOF_1_);
+            String s1 = I18n.func_135052_a("of.options.renderDistance.tiny");
+            int i = 2;
+
+            if (l >= 4)
+            {
+                s1 = I18n.func_135052_a("of.options.renderDistance.short");
+                i = 4;
+            }
+
+            if (l >= 8)
+            {
+                s1 = I18n.func_135052_a("of.options.renderDistance.normal");
+                i = 8;
+            }
+
+            if (l >= 16)
+            {
+                s1 = I18n.func_135052_a("of.options.renderDistance.far");
+                i = 16;
+            }
+
+            if (l >= 32)
+            {
+                s1 = Lang.get("of.options.renderDistance.extreme");
+                i = 32;
+            }
+
+            int j = this.field_151451_c - i;
+            String s2 = s1;
+
+            if (j > 0)
+            {
+                s2 = s1 + "+";
+            }
+
+            return s + l + " " + s2 + "";
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FOG_FANCY)
+        {
+            switch (this.ofFogType)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getOff();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FOG_START)
+        {
+            return s + this.ofFogStart;
+        }
+        else if (p_getKeyBindingOF_1_ == Options.MIPMAP_TYPE)
+        {
+            switch (this.ofMipmapType)
+            {
+                case 0:
+                    return s + Lang.get("of.options.mipmap.nearest");
+
+                case 1:
+                    return s + Lang.get("of.options.mipmap.linear");
+
+                case 2:
+                    return s + Lang.get("of.options.mipmap.bilinear");
+
+                case 3:
+                    return s + Lang.get("of.options.mipmap.trilinear");
+
+                default:
+                    return s + "of.options.mipmap.nearest";
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SMOOTH_FPS)
+        {
+            return this.ofSmoothFps ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SMOOTH_WORLD)
+        {
+            return this.ofSmoothWorld ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CLOUDS)
+        {
+            switch (this.ofClouds)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.TREES)
+        {
+            switch (this.ofTrees)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                default:
+                    return s + Lang.getDefault();
+
+                case 4:
+                    return s + Lang.get("of.general.smart");
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.DROPPED_ITEMS)
+        {
+            switch (this.ofDroppedItems)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.RAIN)
+        {
+            switch (this.ofRain)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_WATER)
+        {
+            switch (this.ofAnimatedWater)
+            {
+                case 1:
+                    return s + Lang.get("of.options.animation.dynamic");
+
+                case 2:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getOn();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_LAVA)
+        {
+            switch (this.ofAnimatedLava)
+            {
+                case 1:
+                    return s + Lang.get("of.options.animation.dynamic");
+
+                case 2:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getOn();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_FIRE)
+        {
+            return this.ofAnimatedFire ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_PORTAL)
+        {
+            return this.ofAnimatedPortal ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_REDSTONE)
+        {
+            return this.ofAnimatedRedstone ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_EXPLOSION)
+        {
+            return this.ofAnimatedExplosion ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_FLAME)
+        {
+            return this.ofAnimatedFlame ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_SMOKE)
+        {
+            return this.ofAnimatedSmoke ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.VOID_PARTICLES)
+        {
+            return this.ofVoidParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.WATER_PARTICLES)
+        {
+            return this.ofWaterParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.PORTAL_PARTICLES)
+        {
+            return this.ofPortalParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.POTION_PARTICLES)
+        {
+            return this.ofPotionParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FIREWORK_PARTICLES)
+        {
+            return this.ofFireworkParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.DRIPPING_WATER_LAVA)
+        {
+            return this.ofDrippingWaterLava ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_TERRAIN)
+        {
+            return this.ofAnimatedTerrain ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ANIMATED_TEXTURES)
+        {
+            return this.ofAnimatedTextures ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.RAIN_SPLASH)
+        {
+            return this.ofRainSplash ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.LAGOMETER)
+        {
+            return this.ofLagometer ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SHOW_FPS)
+        {
+            return this.ofShowFps ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.AUTOSAVE_TICKS)
+        {
+            if (this.ofAutoSaveTicks <= 40)
+            {
+                return s + Lang.get("of.options.save.default");
+            }
+            else if (this.ofAutoSaveTicks <= 400)
+            {
+                return s + Lang.get("of.options.save.20s");
+            }
+            else
+            {
+                return this.ofAutoSaveTicks <= 4000 ? s + Lang.get("of.options.save.3min") : s + Lang.get("of.options.save.30min");
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.BETTER_GRASS)
+        {
+            switch (this.ofBetterGrass)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getOff();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CONNECTED_TEXTURES)
+        {
+            switch (this.ofConnectedTextures)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getOff();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.WEATHER)
+        {
+            return this.ofWeather ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SKY)
+        {
+            return this.ofSky ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.STARS)
+        {
+            return this.ofStars ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SUN_MOON)
+        {
+            return this.ofSunMoon ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.VIGNETTE)
+        {
+            switch (this.ofVignette)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CHUNK_UPDATES)
+        {
+            return s + this.ofChunkUpdates;
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CHUNK_UPDATES_DYNAMIC)
+        {
+            return this.ofChunkUpdatesDynamic ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.TIME)
+        {
+            if (this.ofTime == 1)
+            {
+                return s + Lang.get("of.options.time.dayOnly");
+            }
+            else
+            {
+                return this.ofTime == 2 ? s + Lang.get("of.options.time.nightOnly") : s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CLEAR_WATER)
+        {
+            return this.ofClearWater ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.AA_LEVEL)
+        {
+            String s3 = "";
+
+            if (this.ofAaLevel != Config.getAntialiasingLevel())
+            {
+                s3 = " (" + Lang.get("of.general.restart") + ")";
+            }
+
+            return this.ofAaLevel == 0 ? s + Lang.getOff() + s3 : s + this.ofAaLevel + s3;
+        }
+        else if (p_getKeyBindingOF_1_ == Options.AF_LEVEL)
+        {
+            return this.ofAfLevel == 1 ? s + Lang.getOff() : s + this.ofAfLevel;
+        }
+        else if (p_getKeyBindingOF_1_ == Options.PROFILER)
+        {
+            return this.ofProfiler ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.BETTER_SNOW)
+        {
+            return this.ofBetterSnow ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SWAMP_COLORS)
+        {
+            return this.ofSwampColors ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.RANDOM_MOBS)
+        {
+            return this.ofRandomMobs ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SMOOTH_BIOMES)
+        {
+            return this.ofSmoothBiomes ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CUSTOM_FONTS)
+        {
+            return this.ofCustomFonts ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CUSTOM_COLORS)
+        {
+            return this.ofCustomColors ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CUSTOM_SKY)
+        {
+            return this.ofCustomSky ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SHOW_CAPES)
+        {
+            return this.ofShowCapes ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CUSTOM_ITEMS)
+        {
+            return this.ofCustomItems ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.NATURAL_TEXTURES)
+        {
+            return this.ofNaturalTextures ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FAST_MATH)
+        {
+            return this.ofFastMath ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FAST_RENDER)
+        {
+            return this.ofFastRender ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.TRANSLUCENT_BLOCKS)
+        {
+            if (this.ofTranslucentBlocks == 1)
+            {
+                return s + Lang.getFast();
+            }
+            else
+            {
+                return this.ofTranslucentBlocks == 2 ? s + Lang.getFancy() : s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == Options.LAZY_CHUNK_LOADING)
+        {
+            return this.ofLazyChunkLoading ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.DYNAMIC_FOV)
+        {
+            return this.ofDynamicFov ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ALTERNATE_BLOCKS)
+        {
+            return this.ofAlternateBlocks ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.DYNAMIC_LIGHTS)
+        {
+            int k = indexOf(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+            return s + func_74299_a(KEYS_DYNAMIC_LIGHTS, k);
+        }
+        else if (p_getKeyBindingOF_1_ == Options.SCREENSHOT_SIZE)
+        {
+            return this.ofScreenshotSize <= 1 ? s + Lang.getDefault() : s + this.ofScreenshotSize + "x";
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CUSTOM_ENTITY_MODELS)
+        {
+            return this.ofCustomEntityModels ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.CUSTOM_GUIS)
+        {
+            return this.ofCustomGuis ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FULLSCREEN_MODE)
+        {
+            return this.ofFullscreenMode.equals("Default") ? s + Lang.getDefault() : s + this.ofFullscreenMode;
+        }
+        else if (p_getKeyBindingOF_1_ == Options.HELD_ITEM_TOOLTIPS)
+        {
+            return this.field_92117_D ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.ADVANCED_TOOLTIPS)
+        {
+            return this.field_82882_x ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == Options.FRAMERATE_LIMIT)
+        {
+            float f = this.func_74296_a(p_getKeyBindingOF_1_);
+
+            if (f == 0.0F)
+            {
+                return s + Lang.get("of.options.framerateLimit.vsync");
+            }
+            else
+            {
+                return f == p_getKeyBindingOF_1_.field_148272_O ? s + I18n.func_135052_a("options.framerateLimit.max") : s + (int)f + " fps";
+            }
+        }
+        else
+        {
+            return null;
+        }
+    }
+
+    public void loadOfOptions()
+    {
+        try
+        {
+            File file1 = this.optionsFileOF;
+
+            if (!file1.exists())
+            {
+                file1 = this.field_74354_ai;
+            }
+
+            if (!file1.exists())
+            {
+                return;
+            }
+
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new FileInputStream(file1), StandardCharsets.UTF_8));
+            String s = "";
+
+            while ((s = bufferedreader.readLine()) != null)
+            {
+                try
+                {
+                    String[] astring = s.split(":");
+
+                    if (astring[0].equals("ofRenderDistanceChunks") && astring.length >= 2)
+                    {
+                        this.field_151451_c = Integer.valueOf(astring[1]).intValue();
+                        this.field_151451_c = Config.limit(this.field_151451_c, 2, 1024);
+                    }
+
+                    if (astring[0].equals("ofFogType") && astring.length >= 2)
+                    {
+                        this.ofFogType = Integer.valueOf(astring[1]).intValue();
+                        this.ofFogType = Config.limit(this.ofFogType, 1, 3);
+                    }
+
+                    if (astring[0].equals("ofFogStart") && astring.length >= 2)
+                    {
+                        this.ofFogStart = Float.valueOf(astring[1]).floatValue();
+
+                        if (this.ofFogStart < 0.2F)
+                        {
+                            this.ofFogStart = 0.2F;
+                        }
+
+                        if (this.ofFogStart > 0.81F)
+                        {
+                            this.ofFogStart = 0.8F;
+                        }
+                    }
+
+                    if (astring[0].equals("ofMipmapType") && astring.length >= 2)
+                    {
+                        this.ofMipmapType = Integer.valueOf(astring[1]).intValue();
+                        this.ofMipmapType = Config.limit(this.ofMipmapType, 0, 3);
+                    }
+
+                    if (astring[0].equals("ofOcclusionFancy") && astring.length >= 2)
+                    {
+                        this.ofOcclusionFancy = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofSmoothFps") && astring.length >= 2)
+                    {
+                        this.ofSmoothFps = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofSmoothWorld") && astring.length >= 2)
+                    {
+                        this.ofSmoothWorld = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAoLevel") && astring.length >= 2)
+                    {
+                        this.ofAoLevel = Float.valueOf(astring[1]).floatValue();
+                        this.ofAoLevel = Config.limit(this.ofAoLevel, 0.0F, 1.0F);
+                    }
+
+                    if (astring[0].equals("ofClouds") && astring.length >= 2)
+                    {
+                        this.ofClouds = Integer.valueOf(astring[1]).intValue();
+                        this.ofClouds = Config.limit(this.ofClouds, 0, 3);
+                        this.updateRenderClouds();
+                    }
+
+                    if (astring[0].equals("ofCloudsHeight") && astring.length >= 2)
+                    {
+                        this.ofCloudsHeight = Float.valueOf(astring[1]).floatValue();
+                        this.ofCloudsHeight = Config.limit(this.ofCloudsHeight, 0.0F, 1.0F);
+                    }
+
+                    if (astring[0].equals("ofTrees") && astring.length >= 2)
+                    {
+                        this.ofTrees = Integer.valueOf(astring[1]).intValue();
+                        this.ofTrees = limit(this.ofTrees, OF_TREES_VALUES);
+                    }
+
+                    if (astring[0].equals("ofDroppedItems") && astring.length >= 2)
+                    {
+                        this.ofDroppedItems = Integer.valueOf(astring[1]).intValue();
+                        this.ofDroppedItems = Config.limit(this.ofDroppedItems, 0, 2);
+                    }
+
+                    if (astring[0].equals("ofRain") && astring.length >= 2)
+                    {
+                        this.ofRain = Integer.valueOf(astring[1]).intValue();
+                        this.ofRain = Config.limit(this.ofRain, 0, 3);
+                    }
+
+                    if (astring[0].equals("ofAnimatedWater") && astring.length >= 2)
+                    {
+                        this.ofAnimatedWater = Integer.valueOf(astring[1]).intValue();
+                        this.ofAnimatedWater = Config.limit(this.ofAnimatedWater, 0, 2);
+                    }
+
+                    if (astring[0].equals("ofAnimatedLava") && astring.length >= 2)
+                    {
+                        this.ofAnimatedLava = Integer.valueOf(astring[1]).intValue();
+                        this.ofAnimatedLava = Config.limit(this.ofAnimatedLava, 0, 2);
+                    }
+
+                    if (astring[0].equals("ofAnimatedFire") && astring.length >= 2)
+                    {
+                        this.ofAnimatedFire = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedPortal") && astring.length >= 2)
+                    {
+                        this.ofAnimatedPortal = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedRedstone") && astring.length >= 2)
+                    {
+                        this.ofAnimatedRedstone = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedExplosion") && astring.length >= 2)
+                    {
+                        this.ofAnimatedExplosion = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedFlame") && astring.length >= 2)
+                    {
+                        this.ofAnimatedFlame = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedSmoke") && astring.length >= 2)
+                    {
+                        this.ofAnimatedSmoke = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofVoidParticles") && astring.length >= 2)
+                    {
+                        this.ofVoidParticles = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofWaterParticles") && astring.length >= 2)
+                    {
+                        this.ofWaterParticles = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofPortalParticles") && astring.length >= 2)
+                    {
+                        this.ofPortalParticles = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofPotionParticles") && astring.length >= 2)
+                    {
+                        this.ofPotionParticles = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofFireworkParticles") && astring.length >= 2)
+                    {
+                        this.ofFireworkParticles = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofDrippingWaterLava") && astring.length >= 2)
+                    {
+                        this.ofDrippingWaterLava = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedTerrain") && astring.length >= 2)
+                    {
+                        this.ofAnimatedTerrain = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAnimatedTextures") && astring.length >= 2)
+                    {
+                        this.ofAnimatedTextures = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofRainSplash") && astring.length >= 2)
+                    {
+                        this.ofRainSplash = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofLagometer") && astring.length >= 2)
+                    {
+                        this.ofLagometer = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofShowFps") && astring.length >= 2)
+                    {
+                        this.ofShowFps = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAutoSaveTicks") && astring.length >= 2)
+                    {
+                        this.ofAutoSaveTicks = Integer.valueOf(astring[1]).intValue();
+                        this.ofAutoSaveTicks = Config.limit(this.ofAutoSaveTicks, 40, 40000);
+                    }
+
+                    if (astring[0].equals("ofBetterGrass") && astring.length >= 2)
+                    {
+                        this.ofBetterGrass = Integer.valueOf(astring[1]).intValue();
+                        this.ofBetterGrass = Config.limit(this.ofBetterGrass, 1, 3);
+                    }
+
+                    if (astring[0].equals("ofConnectedTextures") && astring.length >= 2)
+                    {
+                        this.ofConnectedTextures = Integer.valueOf(astring[1]).intValue();
+                        this.ofConnectedTextures = Config.limit(this.ofConnectedTextures, 1, 3);
+                    }
+
+                    if (astring[0].equals("ofWeather") && astring.length >= 2)
+                    {
+                        this.ofWeather = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofSky") && astring.length >= 2)
+                    {
+                        this.ofSky = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofStars") && astring.length >= 2)
+                    {
+                        this.ofStars = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofSunMoon") && astring.length >= 2)
+                    {
+                        this.ofSunMoon = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofVignette") && astring.length >= 2)
+                    {
+                        this.ofVignette = Integer.valueOf(astring[1]).intValue();
+                        this.ofVignette = Config.limit(this.ofVignette, 0, 2);
+                    }
+
+                    if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
+                    {
+                        this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
+                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
+                    }
+
+                    if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
+                    {
+                        this.ofChunkUpdatesDynamic = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofTime") && astring.length >= 2)
+                    {
+                        this.ofTime = Integer.valueOf(astring[1]).intValue();
+                        this.ofTime = Config.limit(this.ofTime, 0, 2);
+                    }
+
+                    if (astring[0].equals("ofClearWater") && astring.length >= 2)
+                    {
+                        this.ofClearWater = Boolean.valueOf(astring[1]).booleanValue();
+                        this.updateWaterOpacity();
+                    }
+
+                    if (astring[0].equals("ofAaLevel") && astring.length >= 2)
+                    {
+                        this.ofAaLevel = Integer.valueOf(astring[1]).intValue();
+                        this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+                    }
+
+                    if (astring[0].equals("ofAfLevel") && astring.length >= 2)
+                    {
+                        this.ofAfLevel = Integer.valueOf(astring[1]).intValue();
+                        this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+                    }
+
+                    if (astring[0].equals("ofProfiler") && astring.length >= 2)
+                    {
+                        this.ofProfiler = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofBetterSnow") && astring.length >= 2)
+                    {
+                        this.ofBetterSnow = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofSwampColors") && astring.length >= 2)
+                    {
+                        this.ofSwampColors = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofRandomMobs") && astring.length >= 2)
+                    {
+                        this.ofRandomMobs = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofSmoothBiomes") && astring.length >= 2)
+                    {
+                        this.ofSmoothBiomes = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofCustomFonts") && astring.length >= 2)
+                    {
+                        this.ofCustomFonts = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofCustomColors") && astring.length >= 2)
+                    {
+                        this.ofCustomColors = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofCustomItems") && astring.length >= 2)
+                    {
+                        this.ofCustomItems = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofCustomSky") && astring.length >= 2)
+                    {
+                        this.ofCustomSky = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofShowCapes") && astring.length >= 2)
+                    {
+                        this.ofShowCapes = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofNaturalTextures") && astring.length >= 2)
+                    {
+                        this.ofNaturalTextures = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofLazyChunkLoading") && astring.length >= 2)
+                    {
+                        this.ofLazyChunkLoading = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofDynamicFov") && astring.length >= 2)
+                    {
+                        this.ofDynamicFov = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofAlternateBlocks") && astring.length >= 2)
+                    {
+                        this.ofAlternateBlocks = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofDynamicLights") && astring.length >= 2)
+                    {
+                        this.ofDynamicLights = Integer.valueOf(astring[1]).intValue();
+                        this.ofDynamicLights = limit(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+                    }
+
+                    if (astring[0].equals("ofScreenshotSize") && astring.length >= 2)
+                    {
+                        this.ofScreenshotSize = Integer.valueOf(astring[1]).intValue();
+                        this.ofScreenshotSize = Config.limit(this.ofScreenshotSize, 1, 4);
+                    }
+
+                    if (astring[0].equals("ofCustomEntityModels") && astring.length >= 2)
+                    {
+                        this.ofCustomEntityModels = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofCustomGuis") && astring.length >= 2)
+                    {
+                        this.ofCustomGuis = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofFullscreenMode") && astring.length >= 2)
+                    {
+                        this.ofFullscreenMode = astring[1];
+                    }
+
+                    if (astring[0].equals("ofFastMath") && astring.length >= 2)
+                    {
+                        this.ofFastMath = Boolean.valueOf(astring[1]).booleanValue();
+                        MathHelper.fastMath = this.ofFastMath;
+                    }
+
+                    if (astring[0].equals("ofFastRender") && astring.length >= 2)
+                    {
+                        this.ofFastRender = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofTranslucentBlocks") && astring.length >= 2)
+                    {
+                        this.ofTranslucentBlocks = Integer.valueOf(astring[1]).intValue();
+                        this.ofTranslucentBlocks = Config.limit(this.ofTranslucentBlocks, 0, 2);
+                    }
+
+                    if (astring[0].equals("key_" + this.ofKeyBindZoom.func_151464_g()))
+                    {
+                        this.ofKeyBindZoom.func_151462_b(Integer.parseInt(astring[1]));
+                    }
+                }
+                catch (Exception exception1)
+                {
+                    Config.dbg("Skipping bad option: " + s);
+                    exception1.printStackTrace();
+                }
+            }
+
+            KeyBinding.func_74508_b();
+            bufferedreader.close();
+        }
+        catch (Exception exception11)
+        {
+            Config.warn("Failed to load options");
+            exception11.printStackTrace();
+        }
+    }
+
+    public void saveOfOptions()
+    {
+        try
+        {
+            PrintWriter printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFileOF), StandardCharsets.UTF_8));
+            printwriter.println("ofRenderDistanceChunks:" + this.field_151451_c);
+            printwriter.println("ofFogType:" + this.ofFogType);
+            printwriter.println("ofFogStart:" + this.ofFogStart);
+            printwriter.println("ofMipmapType:" + this.ofMipmapType);
+            printwriter.println("ofOcclusionFancy:" + this.ofOcclusionFancy);
+            printwriter.println("ofSmoothFps:" + this.ofSmoothFps);
+            printwriter.println("ofSmoothWorld:" + this.ofSmoothWorld);
+            printwriter.println("ofAoLevel:" + this.ofAoLevel);
+            printwriter.println("ofClouds:" + this.ofClouds);
+            printwriter.println("ofCloudsHeight:" + this.ofCloudsHeight);
+            printwriter.println("ofTrees:" + this.ofTrees);
+            printwriter.println("ofDroppedItems:" + this.ofDroppedItems);
+            printwriter.println("ofRain:" + this.ofRain);
+            printwriter.println("ofAnimatedWater:" + this.ofAnimatedWater);
+            printwriter.println("ofAnimatedLava:" + this.ofAnimatedLava);
+            printwriter.println("ofAnimatedFire:" + this.ofAnimatedFire);
+            printwriter.println("ofAnimatedPortal:" + this.ofAnimatedPortal);
+            printwriter.println("ofAnimatedRedstone:" + this.ofAnimatedRedstone);
+            printwriter.println("ofAnimatedExplosion:" + this.ofAnimatedExplosion);
+            printwriter.println("ofAnimatedFlame:" + this.ofAnimatedFlame);
+            printwriter.println("ofAnimatedSmoke:" + this.ofAnimatedSmoke);
+            printwriter.println("ofVoidParticles:" + this.ofVoidParticles);
+            printwriter.println("ofWaterParticles:" + this.ofWaterParticles);
+            printwriter.println("ofPortalParticles:" + this.ofPortalParticles);
+            printwriter.println("ofPotionParticles:" + this.ofPotionParticles);
+            printwriter.println("ofFireworkParticles:" + this.ofFireworkParticles);
+            printwriter.println("ofDrippingWaterLava:" + this.ofDrippingWaterLava);
+            printwriter.println("ofAnimatedTerrain:" + this.ofAnimatedTerrain);
+            printwriter.println("ofAnimatedTextures:" + this.ofAnimatedTextures);
+            printwriter.println("ofRainSplash:" + this.ofRainSplash);
+            printwriter.println("ofLagometer:" + this.ofLagometer);
+            printwriter.println("ofShowFps:" + this.ofShowFps);
+            printwriter.println("ofAutoSaveTicks:" + this.ofAutoSaveTicks);
+            printwriter.println("ofBetterGrass:" + this.ofBetterGrass);
+            printwriter.println("ofConnectedTextures:" + this.ofConnectedTextures);
+            printwriter.println("ofWeather:" + this.ofWeather);
+            printwriter.println("ofSky:" + this.ofSky);
+            printwriter.println("ofStars:" + this.ofStars);
+            printwriter.println("ofSunMoon:" + this.ofSunMoon);
+            printwriter.println("ofVignette:" + this.ofVignette);
+            printwriter.println("ofChunkUpdates:" + this.ofChunkUpdates);
+            printwriter.println("ofChunkUpdatesDynamic:" + this.ofChunkUpdatesDynamic);
+            printwriter.println("ofTime:" + this.ofTime);
+            printwriter.println("ofClearWater:" + this.ofClearWater);
+            printwriter.println("ofAaLevel:" + this.ofAaLevel);
+            printwriter.println("ofAfLevel:" + this.ofAfLevel);
+            printwriter.println("ofProfiler:" + this.ofProfiler);
+            printwriter.println("ofBetterSnow:" + this.ofBetterSnow);
+            printwriter.println("ofSwampColors:" + this.ofSwampColors);
+            printwriter.println("ofRandomMobs:" + this.ofRandomMobs);
+            printwriter.println("ofSmoothBiomes:" + this.ofSmoothBiomes);
+            printwriter.println("ofCustomFonts:" + this.ofCustomFonts);
+            printwriter.println("ofCustomColors:" + this.ofCustomColors);
+            printwriter.println("ofCustomItems:" + this.ofCustomItems);
+            printwriter.println("ofCustomSky:" + this.ofCustomSky);
+            printwriter.println("ofShowCapes:" + this.ofShowCapes);
+            printwriter.println("ofNaturalTextures:" + this.ofNaturalTextures);
+            printwriter.println("ofLazyChunkLoading:" + this.ofLazyChunkLoading);
+            printwriter.println("ofDynamicFov:" + this.ofDynamicFov);
+            printwriter.println("ofAlternateBlocks:" + this.ofAlternateBlocks);
+            printwriter.println("ofDynamicLights:" + this.ofDynamicLights);
+            printwriter.println("ofScreenshotSize:" + this.ofScreenshotSize);
+            printwriter.println("ofCustomEntityModels:" + this.ofCustomEntityModels);
+            printwriter.println("ofCustomGuis:" + this.ofCustomGuis);
+            printwriter.println("ofFullscreenMode:" + this.ofFullscreenMode);
+            printwriter.println("ofFastMath:" + this.ofFastMath);
+            printwriter.println("ofFastRender:" + this.ofFastRender);
+            printwriter.println("ofTranslucentBlocks:" + this.ofTranslucentBlocks);
+            printwriter.println("key_" + this.ofKeyBindZoom.func_151464_g() + ":" + this.ofKeyBindZoom.func_151463_i());
+            printwriter.close();
+        }
+        catch (Exception exception1)
+        {
+            Config.warn("Failed to save options");
+            exception1.printStackTrace();
+        }
+    }
+
+    private void updateRenderClouds()
+    {
+        switch (this.ofClouds)
+        {
+            case 1:
+                this.field_74345_l = 1;
+                break;
+
+            case 2:
+                this.field_74345_l = 2;
+                break;
+
+            case 3:
+                this.field_74345_l = 0;
+                break;
+
+            default:
+                if (this.field_74347_j)
+                {
+                    this.field_74345_l = 2;
+                }
+                else
+                {
+                    this.field_74345_l = 1;
+                }
+        }
+    }
+
+    public void resetSettings()
+    {
+        this.field_151451_c = 8;
+        this.field_74336_f = true;
+        this.field_74337_g = false;
+        this.field_74350_i = (int) Options.FRAMERATE_LIMIT.func_148267_f();
+        this.field_74352_v = false;
+        this.updateVSync();
+        this.field_151442_I = 4;
+        this.field_74347_j = true;
+        this.field_74348_k = 2;
+        this.field_74345_l = 2;
+        this.field_74334_X = 70.0F;
+        this.field_74333_Y = 0.0F;
+        this.field_74335_Z = 0;
+        this.field_74362_aa = 0;
+        this.field_92117_D = true;
+        this.field_178881_t = false;
+        this.field_151455_aw = false;
+        this.ofFogType = 1;
+        this.ofFogStart = 0.8F;
+        this.ofMipmapType = 0;
+        this.ofOcclusionFancy = false;
+        this.ofSmoothFps = false;
+        Config.updateAvailableProcessors();
+        this.ofSmoothWorld = Config.isSingleProcessor();
+        this.ofLazyChunkLoading = Config.isSingleProcessor();
+        this.ofFastMath = false;
+        this.ofFastRender = false;
+        this.ofTranslucentBlocks = 0;
+        this.ofDynamicFov = true;
+        this.ofAlternateBlocks = true;
+        this.ofDynamicLights = 3;
+        this.ofScreenshotSize = 1;
+        this.ofCustomEntityModels = true;
+        this.ofCustomGuis = true;
+        this.ofAoLevel = 1.0F;
+        this.ofAaLevel = 0;
+        this.ofAfLevel = 1;
+        this.ofClouds = 0;
+        this.ofCloudsHeight = 0.0F;
+        this.ofTrees = 0;
+        this.ofRain = 0;
+        this.ofBetterGrass = 3;
+        this.ofAutoSaveTicks = 4000;
+        this.ofLagometer = false;
+        this.ofShowFps = false;
+        this.ofProfiler = false;
+        this.ofWeather = true;
+        this.ofSky = true;
+        this.ofStars = true;
+        this.ofSunMoon = true;
+        this.ofVignette = 0;
+        this.ofChunkUpdates = 1;
+        this.ofChunkUpdatesDynamic = false;
+        this.ofTime = 0;
+        this.ofClearWater = false;
+        this.ofBetterSnow = false;
+        this.ofFullscreenMode = "Default";
+        this.ofSwampColors = true;
+        this.ofRandomMobs = true;
+        this.ofSmoothBiomes = true;
+        this.ofCustomFonts = true;
+        this.ofCustomColors = true;
+        this.ofCustomItems = true;
+        this.ofCustomSky = true;
+        this.ofShowCapes = true;
+        this.ofConnectedTextures = 2;
+        this.ofNaturalTextures = false;
+        this.ofAnimatedWater = 0;
+        this.ofAnimatedLava = 0;
+        this.ofAnimatedFire = true;
+        this.ofAnimatedPortal = true;
+        this.ofAnimatedRedstone = true;
+        this.ofAnimatedExplosion = true;
+        this.ofAnimatedFlame = true;
+        this.ofAnimatedSmoke = true;
+        this.ofVoidParticles = true;
+        this.ofWaterParticles = true;
+        this.ofRainSplash = true;
+        this.ofPortalParticles = true;
+        this.ofPotionParticles = true;
+        this.ofFireworkParticles = true;
+        this.ofDrippingWaterLava = true;
+        this.ofAnimatedTerrain = true;
+        this.ofAnimatedTextures = true;
+        Shaders.setShaderPack(Shaders.packNameNone);
+        Shaders.configAntialiasingLevel = 0;
+        Shaders.uninit();
+        Shaders.storeConfig();
+        this.updateWaterOpacity();
+        this.field_74317_L.func_110436_a();
+        this.func_74303_b();
+    }
+
+    public void updateVSync()
+    {
+        Display.setVSyncEnabled(this.field_74352_v);
+    }
+
+    private void updateWaterOpacity()
+    {
+        if (this.field_74317_L.func_71387_A() && this.field_74317_L.func_71401_C() != null)
+        {
+            Config.waterOpacityChanged = true;
+        }
+
+        ClearWater.updateWaterOpacity(this, this.field_74317_L.field_71441_e);
+    }
+
+    public void setAllAnimations(boolean p_setAllAnimations_1_)
+    {
+        int i = p_setAllAnimations_1_ ? 0 : 2;
+        this.ofAnimatedWater = i;
+        this.ofAnimatedLava = i;
+        this.ofAnimatedFire = p_setAllAnimations_1_;
+        this.ofAnimatedPortal = p_setAllAnimations_1_;
+        this.ofAnimatedRedstone = p_setAllAnimations_1_;
+        this.ofAnimatedExplosion = p_setAllAnimations_1_;
+        this.ofAnimatedFlame = p_setAllAnimations_1_;
+        this.ofAnimatedSmoke = p_setAllAnimations_1_;
+        this.ofVoidParticles = p_setAllAnimations_1_;
+        this.ofWaterParticles = p_setAllAnimations_1_;
+        this.ofRainSplash = p_setAllAnimations_1_;
+        this.ofPortalParticles = p_setAllAnimations_1_;
+        this.ofPotionParticles = p_setAllAnimations_1_;
+        this.ofFireworkParticles = p_setAllAnimations_1_;
+        this.field_74362_aa = p_setAllAnimations_1_ ? 0 : 2;
+        this.ofDrippingWaterLava = p_setAllAnimations_1_;
+        this.ofAnimatedTerrain = p_setAllAnimations_1_;
+        this.ofAnimatedTextures = p_setAllAnimations_1_;
+    }
+
+    private static int nextValue(int p_nextValue_0_, int[] p_nextValue_1_)
+    {
+        int i = indexOf(p_nextValue_0_, p_nextValue_1_);
+
+        if (i < 0)
+        {
+            return p_nextValue_1_[0];
+        }
+        else
+        {
+            ++i;
+
+            if (i >= p_nextValue_1_.length)
+            {
+                i = 0;
+            }
+
+            return p_nextValue_1_[i];
+        }
+    }
+
+    private static int limit(int p_limit_0_, int[] p_limit_1_)
+    {
+        int i = indexOf(p_limit_0_, p_limit_1_);
+        return i < 0 ? p_limit_1_[0] : p_limit_0_;
+    }
+
+    private static int indexOf(int p_indexOf_0_, int[] p_indexOf_1_)
+    {
+        for (int i = 0; i < p_indexOf_1_.length; ++i)
+        {
+            if (p_indexOf_1_[i] == p_indexOf_0_)
+            {
+                return i;
+            }
+        }
+
+        return -1;
+    }
+
+    //op end
+
     @SideOnly(Side.CLIENT)
     public static enum Options
     {
@@ -1342,8 +3235,76 @@
         SHOW_SUBTITLES("options.showSubtitles", false, true),
         REALMS_NOTIFICATIONS("options.realmsNotifications", false, true),
         AUTO_JUMP("options.autoJump", false, true),
-        NARRATOR("options.narrator", false, false);
-
+        NARRATOR("options.narrator", false, false),
+        FOG_FANCY("of.options.FOG_FANCY", false, false),
+        FOG_START("of.options.FOG_START", false, false),
+        MIPMAP_TYPE("of.options.MIPMAP_TYPE", true, false, 0.0F, 3.0F, 1.0F),
+        SMOOTH_FPS("of.options.SMOOTH_FPS", false, false),
+        CLOUDS("of.options.CLOUDS", false, false),
+        CLOUD_HEIGHT("of.options.CLOUD_HEIGHT", true, false),
+        TREES("of.options.TREES", false, false),
+        RAIN("of.options.RAIN", false, false),
+        ANIMATED_WATER("of.options.ANIMATED_WATER", false, false),
+        ANIMATED_LAVA("of.options.ANIMATED_LAVA", false, false),
+        ANIMATED_FIRE("of.options.ANIMATED_FIRE", false, false),
+        ANIMATED_PORTAL("of.options.ANIMATED_PORTAL", false, false),
+        AO_LEVEL("of.options.AO_LEVEL", true, false),
+        LAGOMETER("of.options.LAGOMETER", false, false),
+        SHOW_FPS("of.options.SHOW_FPS", false, false),
+        AUTOSAVE_TICKS("of.options.AUTOSAVE_TICKS", false, false),
+        BETTER_GRASS("of.options.BETTER_GRASS", false, false),
+        ANIMATED_REDSTONE("of.options.ANIMATED_REDSTONE", false, false),
+        ANIMATED_EXPLOSION("of.options.ANIMATED_EXPLOSION", false, false),
+        ANIMATED_FLAME("of.options.ANIMATED_FLAME", false, false),
+        ANIMATED_SMOKE("of.options.ANIMATED_SMOKE", false, false),
+        WEATHER("of.options.WEATHER", false, false),
+        SKY("of.options.SKY", false, false),
+        STARS("of.options.STARS", false, false),
+        SUN_MOON("of.options.SUN_MOON", false, false),
+        VIGNETTE("of.options.VIGNETTE", false, false),
+        CHUNK_UPDATES("of.options.CHUNK_UPDATES", false, false),
+        CHUNK_UPDATES_DYNAMIC("of.options.CHUNK_UPDATES_DYNAMIC", false, false),
+        TIME("of.options.TIME", false, false),
+        CLEAR_WATER("of.options.CLEAR_WATER", false, false),
+        SMOOTH_WORLD("of.options.SMOOTH_WORLD", false, false),
+        VOID_PARTICLES("of.options.VOID_PARTICLES", false, false),
+        WATER_PARTICLES("of.options.WATER_PARTICLES", false, false),
+        RAIN_SPLASH("of.options.RAIN_SPLASH", false, false),
+        PORTAL_PARTICLES("of.options.PORTAL_PARTICLES", false, false),
+        POTION_PARTICLES("of.options.POTION_PARTICLES", false, false),
+        FIREWORK_PARTICLES("of.options.FIREWORK_PARTICLES", false, false),
+        PROFILER("of.options.PROFILER", false, false),
+        DRIPPING_WATER_LAVA("of.options.DRIPPING_WATER_LAVA", false, false),
+        BETTER_SNOW("of.options.BETTER_SNOW", false, false),
+        FULLSCREEN_MODE("of.options.FULLSCREEN_MODE", true, false, 0.0F, (float)Config.getDisplayModes().length, 1.0F),
+        ANIMATED_TERRAIN("of.options.ANIMATED_TERRAIN", false, false),
+        SWAMP_COLORS("of.options.SWAMP_COLORS", false, false),
+        RANDOM_MOBS("of.options.RANDOM_MOBS", false, false),
+        SMOOTH_BIOMES("of.options.SMOOTH_BIOMES", false, false),
+        CUSTOM_FONTS("of.options.CUSTOM_FONTS", false, false),
+        CUSTOM_COLORS("of.options.CUSTOM_COLORS", false, false),
+        SHOW_CAPES("of.options.SHOW_CAPES", false, false),
+        CONNECTED_TEXTURES("of.options.CONNECTED_TEXTURES", false, false),
+        CUSTOM_ITEMS("of.options.CUSTOM_ITEMS", false, false),
+        AA_LEVEL("of.options.AA_LEVEL", true, false, 0.0F, 16.0F, 1.0F),
+        AF_LEVEL("of.options.AF_LEVEL", true, false, 1.0F, 16.0F, 1.0F),
+        ANIMATED_TEXTURES("of.options.ANIMATED_TEXTURES", false, false),
+        NATURAL_TEXTURES("of.options.NATURAL_TEXTURES", false, false),
+        HELD_ITEM_TOOLTIPS("of.options.HELD_ITEM_TOOLTIPS", false, false),
+        DROPPED_ITEMS("of.options.DROPPED_ITEMS", false, false),
+        LAZY_CHUNK_LOADING("of.options.LAZY_CHUNK_LOADING", false, false),
+        CUSTOM_SKY("of.options.CUSTOM_SKY", false, false),
+        FAST_MATH("of.options.FAST_MATH", false, false),
+        FAST_RENDER("of.options.FAST_RENDER", false, false),
+        TRANSLUCENT_BLOCKS("of.options.TRANSLUCENT_BLOCKS", false, false),
+        DYNAMIC_FOV("of.options.DYNAMIC_FOV", false, false),
+        DYNAMIC_LIGHTS("of.options.DYNAMIC_LIGHTS", false, false),
+        ALTERNATE_BLOCKS("of.options.ALTERNATE_BLOCKS", false, false),
+        CUSTOM_ENTITY_MODELS("of.options.CUSTOM_ENTITY_MODELS", false, false),
+        ADVANCED_TOOLTIPS("of.options.ADVANCED_TOOLTIPS", false, false),
+        SCREENSHOT_SIZE("of.options.SCREENSHOT_SIZE", false, false),
+        CUSTOM_GUIS("of.options.CUSTOM_GUIS", false, false);
+        
         private final boolean field_74385_A;
         private final boolean field_74386_B;
         private final String field_74387_C;
@@ -1440,4 +3401,35 @@
             return p_148264_1_;
         }
     }
+
+    /******* Forge Start ***********/
+    private void setForgeKeybindProperties() {
+        net.minecraftforge.client.settings.KeyConflictContext inGame = net.minecraftforge.client.settings.KeyConflictContext.IN_GAME;
+        field_74351_w.setKeyConflictContext(inGame);
+        field_74370_x.setKeyConflictContext(inGame);
+        field_74368_y.setKeyConflictContext(inGame);
+        field_74366_z.setKeyConflictContext(inGame);
+        field_74314_A.setKeyConflictContext(inGame);
+        field_74311_E.setKeyConflictContext(inGame);
+        field_151444_V.setKeyConflictContext(inGame);
+        field_74312_F.setKeyConflictContext(inGame);
+        field_74310_D.setKeyConflictContext(inGame);
+        field_74321_H.setKeyConflictContext(inGame);
+        field_74323_J.setKeyConflictContext(inGame);
+        field_151457_aa.setKeyConflictContext(inGame);
+        field_151458_ab.setKeyConflictContext(inGame);
+        field_186718_X.setKeyConflictContext(inGame);
+    }
+
+    // FORGE: fix for MC-64581 very laggy mipmap slider
+    private boolean needsBlockModelRefresh = false;
+    public void onGuiClosed()
+    {
+        if (needsBlockModelRefresh)
+        {
+            net.minecraftforge.fml.client.FMLClientHandler.instance().scheduleResourcesRefresh(net.minecraftforge.client.resource.VanillaResourceType.MODELS);
+            this.needsBlockModelRefresh = false;
+        }
+    }
+    /******* Forge End ***********/
 }
